---

- name: Check local SSH key
  stat:
    path: "~/.ssh/{{ deployment_ssh_filename }}.pub"
  register: local_ssh_key
  delegate_to: localhost

- name: Create a new SSH key locally if it does not exist
  shell: "ssh-keygen -q -b 2048 -t rsa -N '' -f ~/.ssh/{{ deployment_ssh_filename }}" #        creates="~/.ssh/id_rsa"
  when: not local_ssh_key.stat.exists
  delegate_to: localhost

- name: Copy the new public SSH key to VM
  authorized_key:
    user: "{{ ansible_user }}"
    state: present
    key: "{{ lookup('file', '~/.ssh/'+deployment_ssh_filename+'.pub') }}"
  # register: regular_copy_attempt
  # ignore_errors: yes

# - name: Copy public key to VM ssh-copy-id if failed
#   shell: sshpass -p {{ deployment_template_password }} ssh-copy-id -f -i ~/.ssh/{{ deployment_ssh_filename}}.pub -o StrictHostKeyChecking=no {{ deployment_username }}@{{ inventory_hostname }}
#   when: regular_copy_attempt is failed 
#   delegate_to: localhost

- name: Temporarily set ansible_become_password
  set_fact:
    ansible_become_password: "{{ deployment_template_password | password_hash('sha512') }}"

- name: Reset passwords for current account "{{ ansible_user }}"
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    password: "{{ deployment_password | password_hash('sha512') }}"
  become: yes
  become_user: root
  ignore_errors: yes

- name: Temporarily set ansible_become_password to new password
  set_fact:
    ansible_become_password: "{{ deployment_password | password_hash('sha512') }}"

- name: Reset passwords for current account root
  ansible.builtin.user:
    name: root
    password: "{{ deployment_password | password_hash('sha512') }}"
  become: yes
  become_user: root
  ignore_errors: yes