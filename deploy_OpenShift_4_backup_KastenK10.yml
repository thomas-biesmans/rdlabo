--- 
- import_playbook: tasks/check_all.yml



- name: Check OpenShift deployment status
  hosts: openshift_bootstrap_nodes
  gather_facts: false
  vars_files:
  - passwords/ansible_vault.yml
  - vars/network-config.yml
  - group_vars/vcenter_vms.yml
  environment:
    KUBECONFIG: "{{ vars.openshift_config_dir }}/auth/kubeconfig"
  tasks:

  - name: Combine customized VM config
    set_fact:
      community_vmware_vmware__guest: "{{ default_community_vmware_vmware__guest | combine(custom_community_vmware_vmware__guest | default({}), recursive=true) }}"
      ansible_becomes_password: "{{ client_password }}"
    tags: always

  - name: Gather hostvars as dict
    set_fact:
      hostvars_dict: "{{ hostvars }}"
    tags: always

  - name: Check whether OpenShift cluster exists already
    tags: always
    delegate_to: localhost
    block:

    - name: Check whether OpenShift cluster exists already
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Namespace
        name: openshift-kube-apiserver
      register: namespace_kube_apiserver
      delay: 10
      retries: 3
      ignore_errors: yes

    - name: "Halt when namespace 'openshift-kube-apiserver' does not already exists"
      fail:
        msg: "Namespace 'openshift-kube-apiserver' does not already exists, deploy it first!"
      when:  namespace_kube_apiserver.failed or namespace_kube_apiserver.resources[0].status.phase | default('') != "Active"

  # - name: Deploy pre-reqs
  #   delegate_to: localhost
  #   block:


- name: Deploy general backup requirements
  hosts: openshift_bootstrap_nodes
  gather_facts: false
  vars_files:
  - passwords/ansible_vault.yml
  - vars/network-config.yml
  - group_vars/vcenter_vms.yml
  environment:
    KUBECONFIG: "{{ vars.openshift_config_dir }}/auth/kubeconfig"
  tasks:

  - name: Deploy general reqs
    tags: deploy_general_reqs
    delegate_to: localhost
    block:
      
    - name: Label Data Foundation namespace if it exists
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: openshift-storage
        definition:
          metadata:
            labels:
              enable.backup: "false"
      register: result
      delay: 10
      retries: 3

- name: Deploy Kasten K10 backup
  hosts: openshift_upi_srdcopenshiftdev_vms_bootstrap_node # openshift_bootstrap_nodes
  gather_facts: false
  vars_files:
  - passwords/ansible_vault.yml
  - vars/network-config.yml
  - group_vars/vcenter_vms.yml
  environment:
    KUBECONFIG: "{{ vars.openshift_config_dir }}/auth/kubeconfig"
  tasks:

  - name: Deploy KastenK10 reqs
    tags: deploy_kastenk10_reqs
    delegate_to: localhost
    block:

    - name: Add namespace
      vars:
        app_namespace: "{{ kasten_k10_config.sa_namespace }}"
      kubernetes.core.k8s:
          state: present
          template: 'templates/openshift_4_resource_namespace.yml'

    - name: Add Service Account
      vars:
        app_sa_name: "{{ kasten_k10_config.sa_name }}"
        app_namespace: "{{ kasten_k10_config.sa_namespace }}"
      kubernetes.core.k8s:
        api_version: apps/v1
        template: 'templates/openshift_4_resource_serviceaccount.yml'

    - name: Add a cluster-admin Cluster Role Binding for our Service Account
      vars:
        crb_name: "{{ kasten_k10_config.sa_clusterrolebinding_name }}"
        role_apigroup: rbac.authorization.k8s.io
        role_name: cluster-admin
        role_kind: ClusterRole
        subject_namespace: "{{ kasten_k10_config.sa_namespace }}"
        subject_name: "{{ kasten_k10_config.sa_name }}"
        subject_kind: ServiceAccount
      kubernetes.core.k8s:
        api_version: apps/v1
        template: 'templates/openshift_4_resource_clusterrolebinding.yml'

    - name: Get the secrets
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        namespace: "{{ kasten_k10_config.sa_namespace }}"
      register: sa_secrets
      delay: 10
      retries: 3

    - name: Show the Service Account's token
      debug:
        msg: "{{ sa_secrets | to_json | from_json | json_query( query ) | b64decode }}"
      vars:
        query: >
          resources[?(
            @.metadata.annotations."kubernetes.io/service-account.name"=='sa-kasten' && 
            contains(@.metadata.name, 'token')
          )].data.token


  - name: Deploy KastenK10
    tags: deploy_kastenk10
    delegate_to: localhost
    block:

    - name: Install Kasten K10 Operator
      include: tasks/deploy_openshift_operator_install.yml
      tags: onlyme
      vars:
        install_operator_action: install
        install_operator_name: "{{ vars.kasten_k10_config.operator_name }}"
        install_operator_namespace: "{{ vars.kasten_k10_config.operator_manage_namespaces }}"
        install_operator_catalog: "{{ vars.kasten_k10_config.operator_subscription_source }}"
        install_operator_packagemanifest_name: "{{ vars.kasten_k10_config.operator_name }}" 
        install_operator_csv_nameprefix: "{{ vars.kasten_k10_config.operator_name }}"
        install_operator_install_csv_ignore_error: false
        install_operator_channel: "{{ vars.kasten_k10_config.operator_channel }}"
        install_operator_automatic_install_plan_approval: "{{ vars.kasten_k10_config.operator_automatic_install_plan_approval | default(true) }}"
        install_operator_manage_namespaces:
        - "{{ vars.kasten_k10_config.operator_manage_namespaces }}"
        install_operator_catalogsource_setup: "{{ vars.kasten_k10_config.operator_catalogsource_setup | default(false) }}"
        install_operator_catalogsource_name: "{{ vars.kasten_k10_config.operator_catalogsource_name | default('') }}"
        install_operator_catalogsource_image: "{{ vars.kasten_k10_config.operator_catalogsource_image | default('') }}"
        install_operator_catalogsource_image_tag: "{{ vars.kasten_k10_config.operator_catalogsource_image_tag | default('') }}"


