---

- ansible.builtin.include_tasks: tasks/deploy-vmware-vms-folders.yml

- name: Get a list of all MACs
  set_fact:
    listofmacs: "{{ vars.nics | map(attribute='mac') | map('community.general.dict_kv', 'mac') | list }}"

- name: Update VM network IP & MAC based on inventory, adding network to the list
  set_fact:
    new_networks: "{{ [] + community_vmware_vmware__guest.networks | zip( listofmacs ) | map('combine') | list }}"

- name: Print an overview of attached NICs for the new VMs
  debug:
    msg: "{{ vars.new_networks }}"

# - name: Update VM network IP & MAC based on inventory, adding network to the list
#   set_fact:
#     new_networks: "{{ new_networks + [community_vmware_vmware__guest.networks | combine({'ip': vars.nics[0].ip}, recursive=true)] }}"
#     new_networks_with_mac: "{{ new_networks + [community_vmware_vmware__guest.networks | combine({'ip': vars.nics[0].ip}, recursive=true) | combine({'mac': vars.nics[0].mac | default ('')}, recursive=true)] }}"
#   when: vars.os_customization_for_ip and vars.nics[0].mac is defined

# - name: Update VM network IP only based on inventory, adding network to the list
#   set_fact:
#     new_networks: "{{ new_networks + [community_vmware_vmware__guest.networks | combine({'ip': vars.nics[0].ip}, recursive=true)] }}"
#     new_networks_with_mac: "{{ new_networks + [community_vmware_vmware__guest.networks | combine({'ip': vars.nics[0].ip}, recursive=true)] }}"
#   when: vars.os_customization_for_ip and vars.nics[0].mac is not defined

# - name: Update VM network MAC only based on inventory, adding network to the list
#   set_fact:
#     new_networks: "{{ new_networks + [community_vmware_vmware__guest.networks] }}"
#     new_networks_with_mac: "{{ new_networks + [community_vmware_vmware__guest.networks | combine({'mac': vars.nics[0].mac | default ('')}, recursive=true)] }}"
#   when: not vars.os_customization_for_ip and vars.nics[0].mac is defined

# - name: Do not update VM network when no IP or MAC are added based on inventory, adding network to the list
#   set_fact:
#     new_networks: "{{ new_networks + [community_vmware_vmware__guest.networks] }}"
#     new_networks_with_mac: "{{ new_networks + [community_vmware_vmware__guest.networks] }}"
#   when: not vars.os_customization_for_ip and vars.nics[0].mac is not defined

- name: Show added IPs and MACs
  debug:
    msg: "IP: {{ vars.nics[0].ip | default ('Not defined')}}, MAC: {{ vars.nics[0].mac | default ('Not defined') }}"

- name: Deploy the VM including retry and rescue
  block:

  - name: Get VM facts pre-deploy
    retries: 3
    delay: 10
    ignore_errors: true
    community.vmware.vmware_guest:
      validate_certs: "{{ validate_certs | default(false) }}"
      hostname: "{{ vcenter_hostname | default(lookup('env', 'VMWARE_HOST')) }}"
      username: "{{ vcenter_username | default(lookup('env', 'VMWARE_USER')) }}"
      password: "{{ vcenter_password | default(lookup('env', 'VMWARE_PASSWORD')) }}"  
      datacenter: "{{ vars.community_vmware_vmware__guest.datacenter }}"
      name: "{{ inventory_hostname_short }}"
      folder: "{{ vars.community_vmware_vmware__guest.folder | default('vm') }}"
    delegate_to: localhost
    register: facts_pre_deploy


  - name: Deploy VM if it does not exist
    when: facts_pre_deploy.failed
    block:

    - name: Deploy the VM from a regular template, ignoring additional NICs
      throttle: "{{ parallel_deployments }}"
      retries: 3
      delay: 10
      community.vmware.vmware_guest:
        validate_certs: "{{ validate_certs | default(false) }}"
        hostname: "{{ vcenter_hostname | default(lookup('env', 'VMWARE_HOST')) }}"
        username: "{{ vcenter_username | default(lookup('env', 'VMWARE_USER')) }}"
        password: "{{ vcenter_password | default(lookup('env', 'VMWARE_PASSWORD')) }}"
        datacenter: "{{ vars.community_vmware_vmware__guest.datacenter }}"
        cluster: "{{ vars.community_vmware_vmware__guest.cluster }}"
        folder: "{{ vars.community_vmware_vmware__guest.folder | default('vm') }}"
        name: "{{ inventory_hostname_short }}"
        state: "present" #"{{ vars.community_vmware_vmware__guest.state | default('poweredon') }}"
        template: "{{ vars.community_vmware_vmware__guest.template }}"
        disk: "{{ vars.community_vmware_vmware__guest.disk }}"
        # - size_gb: 30
        #   type: eagerzeroedthick # thin, thick, eagerzeroedthick
        #   datastore: RDL3PAR01_ESXCORE_VMFS_L101
        # # Add another disk from an existing VMDK
        # #- filename: "[datastore1] testvms/testvm_2_1/testvm_2_1.vmdk"
        hardware:
          memory_mb: "{{ vars.community_vmware_vmware__guest.hardware.memory_mb | default('4096') }}"
          num_cpus: "{{ vars.community_vmware_vmware__guest.hardware.num_cpus | default('1') }}"
          num_cpu_cores_per_socket: "{{ vars.community_vmware_vmware__guest.hardware.num_cpu_cores_per_socket | default('1') }}"
          scsi: "{{ vars.community_vmware_vmware__guest.hardware.scsi | default('paravirtual') }}"
          # memory_reservation_lock: true
          # mem_limit: 8096
          # mem_reservation: 4096
          # cpu_limit: 8096
          # cpu_reservation: 4096
          max_connections: "{{ vars.community_vmware_vmware__guest.hardware.max_connections | default('5') }}"
          # hotadd_cpu: True
          # hotremove_cpu: True
          # hotadd_memory: False
          version: "{{ vars.community_vmware_vmware__guest.hardware.version | default('14') }}" # Hardware version of virtual machine
          boot_firmware: "{{ vars.community_vmware_vmware__guest.hardware.boot_firmware | default('efi') }}"
        # cdrom:
        #     - controller_number: 0
        #       unit_number: 0
        #       state: present
        #       type: iso
        #       iso_path: "[datastore1] livecd.iso"
        networks: "{{ [vars.new_networks | first] | list }}"
        customization: "{{ vars.community_vmware_vmware__guest.customization | default (omit) }}"
        # advanced_settings: "{{ vars.community_vmware_vmware__guest.advanced_settings | default ({}) }}"

        wait_for_ip_address: "{{ vars.community_vmware_vmware__guest.wait_for_ip_address | default(false) }}"

      delegate_to: localhost
      register: deploy
      # failed_when: vars.os_customization_for_ip and not (vars.nics[0].ip in (deploy.instance.hw_eth0.ipaddresses )) # only useful in OKD 3.11

    - name: Update VMs' Advanced Settings
      throttle: "{{ parallel_deployments }}"
      retries: 3
      delay: 10
      community.vmware.vmware_guest:
        validate_certs: "{{ validate_certs | default(false) }}"
        hostname: "{{ vcenter_hostname | default(lookup('env', 'VMWARE_HOST')) }}"
        username: "{{ vcenter_username | default(lookup('env', 'VMWARE_USER')) }}"
        password: "{{ vcenter_password | default(lookup('env', 'VMWARE_PASSWORD')) }}"
        name: "{{ inventory_hostname_short }}"
        state: present
        advanced_settings: "{{ vars.community_vmware_vmware__guest.advanced_settings | default (omit) }}"

      delegate_to: localhost
      when: vars.community_vmware_vmware__guest.advanced_settings is defined

    - name: Update VMNics with fixed macs, only handling the first NIC
      throttle: "{{ parallel_deployments }}"
      retries: 3
      delay: 10
      community.vmware.vmware_guest_network:
        validate_certs: "{{ validate_certs | default(false) }}"
        hostname: "{{ vcenter_hostname | default(lookup('env', 'VMWARE_HOST')) }}"
        username: "{{ vcenter_username | default(lookup('env', 'VMWARE_USER')) }}"
        password: "{{ vcenter_password | default(lookup('env', 'VMWARE_PASSWORD')) }}"
        name: "{{ inventory_hostname_short }}"
        state: present
        network_name: "{{ item.name }}"
        device_type: "{{ item.device_type | default('vmxnet3') }}"
        connected: "{{ item.connected | default('true') }}"
        start_connected: "{{ item.start_connected | default('true') }}"
        mac_address: "{{ item.mac | default (omit)}}"
        label: "{{ item.label | default (omit)}}"

      delegate_to: localhost
      register: deploy_macchange
      loop:
      - "{{ vars.new_networks[0] }}"
      when: item.mac is defined

  rescue:
  - name: Pause to warn for deletion
    pause:
      prompt: About to remove and redeploy one or more VMs. Press enter to continue or abort with Ctrl-C

  - name: Remove the VM prior to retry
    when: facts_pre_deploy.failed
    community.vmware.vmware_guest:
      validate_certs: "{{ validate_certs | default(false) }}"
      hostname: "{{ vcenter_hostname | default(lookup('env', 'VMWARE_HOST')) }}"
      username: "{{ vcenter_username | default(lookup('env', 'VMWARE_USER')) }}"
      password: "{{ vcenter_password | default(lookup('env', 'VMWARE_PASSWORD')) }}"
      datacenter: "{{ vars.community_vmware_vmware__guest.datacenter }}"
      cluster: "{{ vars.community_vmware_vmware__guest.cluster }}"
      folder: "{{ vars.community_vmware_vmware__guest.folder | default('vm') }}"
      name: "{{ inventory_hostname_short }}"
      state: absent
      force: yes
    delegate_to: localhost
    when: vars.delete_during_retry

- name: Get VM facts
  retries: 3
  delay: 10
  community.vmware.vmware_guest:
    validate_certs: "{{ validate_certs | default(false) }}"
    hostname: "{{ vcenter_hostname | default(lookup('env', 'VMWARE_HOST')) }}"
    username: "{{ vcenter_username | default(lookup('env', 'VMWARE_USER')) }}"
    password: "{{ vcenter_password | default(lookup('env', 'VMWARE_PASSWORD')) }}"  
    datacenter: "{{ vars.community_vmware_vmware__guest.datacenter }}"
    name: "{{ inventory_hostname_short }}"
    folder: "{{ vars.community_vmware_vmware__guest.folder | default('vm') }}"
  delegate_to: localhost
  register: facts_post_deploy
  when: vars.nics[0].mac is defined

# - name: Show VM info
#   debug:
#     msg: "{{ facts_post_deploy }}"

