---

- name: Install docker repo
  shell: yum-config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo
  args:
    creates: /etc/yum.repos.d/docker-ce.repo
  become: yes

- name: Deploy Docker
  yum:
    name: docker-1.13.1
    state: present
  become: yes

- name: Deploy git
  yum:
    name: git
    state: present
  become: yes


- name: Check whether RedHat CA file exists
  ansible.builtin.stat:
    path: /etc/docker/certs.d/registry.access.redhat.com/redhat-ca.crt
  register: rh_ca_file
  become: yes

- name: Set Red Hat CA file if not exists
  ansible.builtin.copy:
    dest: /etc/docker/certs.d/registry.access.redhat.com/redhat-ca.crt
    src: /etc/rhsm/ca/redhat-uep.pem
    owner: root
    group: root
  become: yes
  when: not rh_ca_file.stat.exists


- name: Read device information (always use unit when probing)
  community.general.parted: device=/dev/sdb unit=MiB
  register: sdb_info
  become: yes
  
- name: Create a new partition to fill all available space on the second drive
  community.general.parted:
    device: /dev/sdb
    number: "{{ (sdb_info.partitions | length) + 1 }}"
    flags: [ lvm ]
    part_end: "100%"
    state: present
  become: yes
  when: not sdb_info.partitions

- name: Check presence of VG
  command: vgdisplay vg-docker
  register: vgdisplay
  ignore_errors: yes
  become: yes

- name: Extend the vg to the PV's new maximum size
  community.general.lvg:
    vg: vg-docker
    pvs: /dev/sdb1
    pvresize: yes
  become: yes
  when: vgdisplay.failed

- name: Check whether storage config was already added to docker-storage-setup
  ansible.builtin.lineinfile:
    path: /etc/sysconfig/docker-storage-setup
    state: present
    line: "VG=vg-docker"
  check_mode: yes
  register: storage_setup_linecheck

# - name: temp
#   lineinfile:
#     regexp: "VG=vg-docker"
#     state: absent
#     path: /etc/sysconfig/docker-storage-setup
#   become: yes
# - name: temp
#   lineinfile:
#     regexp: "SETUP_LVM_THIN_POOL=yes"
#     state: absent
#     path: /etc/sysconfig/docker-storage-setup
#   become: yes
# - name: pause
#   fail: {}

- name: Add storage config to docker-storage-setup
  ansible.builtin.lineinfile:
    path: /etc/sysconfig/docker-storage-setup
    insertafter: EOF
    state: present
    line: "VG=vg-docker\nDEVS=/dev/sdb\nCONTAINER_ROOT_LV_NAME=lv-docker\nCONTAINER_ROOT_LV_SIZE=100%FREE\nCONTAINER_ROOT_LV_MOUNT_PATH=/var/lib/docker"
  become: yes
  when: storage_setup_linecheck is changed

- name: Execute docker storage setup
  command: docker-storage-setup
  become: yes
  register: storage_setup_output
  when: storage_setup_linecheck is changed

- name: Show output if setup is performed
  debug:
    msg: "{{  storage_setup_output.stdout }}"
  when: storage_setup_linecheck is changed

- name: Show error output if setup is performed
  debug:
    msg: "{{  storage_setup_output.stderr }}"
  when: storage_setup_linecheck is changed

- name: Check that the docker service is enabled & restarted
  ansible.builtin.systemd:
    name: docker
    enabled: yes
    state: restarted
  become: yes

- name: Deploy glusterf-fuse
  yum:
    name: glusterfs-fuse
    state: present
  become: yes


- name: Check dnsmasq folder exists
  ansible.builtin.file:
    path: /etc/dnsmasq.d
    state: directory
    owner: root
    mode: '0777'
  become: yes

- name: Check whether dnsmasq forwarding config file already exists
  ansible.builtin.stat:
    path: /etc/dnsmasq.d/origin-upstream-dns.conf 
  register: dnsmasq_forwarding_config

- name: Set dnsmasq forwarding due to NM_CONTROLLED missing from ifcfg, probably due to deployment method using cloud_init
  ansible.builtin.copy:
    dest: /etc/dnsmasq.d/origin-upstream-dns.conf 
    content: "server=10.255.254.102" #\nserver=10.255.254.101" # address=/rdlabo.local/10.255.254.88\naddress=/rdlabo.local/10.255.254.101
  become: yes
  when: not dnsmasq_forwarding_config.stat.exists
# content: "server=10.255.254.102\nserver=10.255.254.101"

- name: Check that the dnsmasq service is enabled & restarted
  ansible.builtin.systemd:
    name: dnsmasq
    enabled: yes
    state: restarted
  ignore_errors: yes
  become: yes


- name: Check Origin DNS folder exists
  ansible.builtin.file:
    path: /etc/origin/node
    state: directory
    owner: root
    mode: '0777'
  become: yes

- name: Check whether Origin DNS config file already exists
  ansible.builtin.stat:
    path: /etc/origin/node/resolv.conf
  become: yes
  register: origin_dns_config

- name: Set Origin DNS config file, to prevent openshift-sdn from deploying pods
  ansible.builtin.copy:
    dest: /etc/origin/node/resolv.conf
    content: "nameserver 10.255.254.102"
  become: yes
  when: not origin_dns_config.stat.exists



# - name: Check CNI folder exists
#   ansible.builtin.file:
#     path: /etc/cni/net.d
#     state: directory
#     owner: root
#     mode: '0777'
#   become: yes

# - name: Check whether CNI SDN config file already exists
#   ansible.builtin.stat:
#     path: /etc/cni/net.d/80-openshift-network.conf
#   register: cni_sdn_config

# - name: Set CNI SDN config file, to prevent OKD cluster deployments failint to deploy the ServiceMonitor CRD, which is cause by nodes not becoming ready due to 'network plugin is not ready cni config uninitialized'
#   ansible.builtin.copy:
#     dest: /etc/cni/net.d/80-openshift-network.conf
#     content: "{\n  \"cniVersion\": \"0.2.0\",\n  \"name\": \"openshift-sdn\",\n  \"type\": \"openshift-sdn\"\n}"
#   become: yes
#   when: not cni_sdn_config.stat.exists
  