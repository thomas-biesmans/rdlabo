---

- name: Biep 
  ansible.builtin.debug:
    msg: "Test: {{ vars.community_vmware_vmware__guest.folder }} & {{ vcenter_hostname }} & {{ inventory_hostname }} & {{ inventory_hostname_short }} & {{ vars.ip }}"


- name: Check whether the cluster exists
  when:
    - vars.community_vmware_vmware__guest.cluster is defined
  block:
    - name: Check cluster - Gather cluster information
      community.vmware.vmware_cluster_info:
        validate_certs: "{{ validate_certs | default(false) }}"
        hostname: "{{ vcenter_hostname | default(lookup('env', 'VMWARE_HOST')) }}"
        username: "{{ vcenter_username | default(lookup('env', 'VMWARE_USER')) }}"
        password: "{{ vcenter_password | default(lookup('env', 'VMWARE_PASSWORD')) }}"
        datacenter: "{{ vars.community_vmware_vmware__guest.datacenter }}"
      register: get_cluster_info_result

    - name: Check cluster - Fail if the cluster doesn't exist
      fail:
        msg: "{{ vars.community_vmware_vmware__guest.cluster }} not found."
      when:
        - "not vars.community_vmware_vmware__guest.cluster in get_cluster_info_result.clusters"
  
  delegate_to: localhost


# - name: show path
#   debug:
#     msg: "Now '{{ item }}', total '{{ vars.community_vmware_vmware__guest.folder.split('/')[1:1+index_current]|join('/') }}'"
#   loop: "{{ vars.community_vmware_vmware__guest.folder.split('/')[1:] }}"
#   loop_control:
#     extended: true
#     index_var: index_current


- name: Deploy the VM folder recursively
  community.vmware.vcenter_folder:
    validate_certs: "{{ validate_certs | default(false) }}"
    hostname: "{{ vcenter_hostname | default(lookup('env', 'VMWARE_HOST')) }}"
    username: "{{ vcenter_username | default(lookup('env', 'VMWARE_USER')) }}"
    password: "{{ vcenter_password | default(lookup('env', 'VMWARE_PASSWORD')) }}"
    datacenter: "{{ vars.community_vmware_vmware__guest.datacenter }}"
    folder_name: "{{ item | default('vm') }}"
    parent_folder: "{{ vars.community_vmware_vmware__guest.folder.split('/')[1:1+index_current]|join('/') }}"
    folder_type: vm
    state: present
  loop: "{{ vars.community_vmware_vmware__guest.folder.split('/')[1:] }}"
  loop_control:
    extended: true
    index_var: index_current

  delegate_to: localhost


- name: Update VM network IP based on inventory, creating list
  set_fact:
    new_networks: []
    new_networks_with_mac: []

- name: Update VM network IP & MAC based on inventory, adding network to the list
  set_fact:
    new_networks: "{{ new_networks + [community_vmware_vmware__guest.networks | combine({'ip': vars.ip}, recursive=true)] }}"
    new_networks_with_mac: "{{ new_networks + [community_vmware_vmware__guest.networks | combine({'ip': vars.ip}, recursive=true) | combine({'mac': vars.mac | default ('')}, recursive=true)] }}"
  when: vars.os_customization_for_ip and vars.mac is defined

- name: Update VM network IP only based on inventory, adding network to the list
  set_fact:
    new_networks: "{{ new_networks + [community_vmware_vmware__guest.networks | combine({'ip': vars.ip}, recursive=true)] }}"
    new_networks_with_mac: "{{ new_networks + [community_vmware_vmware__guest.networks | combine({'ip': vars.ip}, recursive=true)] }}"
  when: vars.os_customization_for_ip and vars.mac is not defined

- name: Update VM network MAC only based on inventory, adding network to the list
  set_fact:
    new_networks: "{{ new_networks + [community_vmware_vmware__guest.networks] }}"
    new_networks_with_mac: "{{ new_networks + [community_vmware_vmware__guest.networks | combine({'mac': vars.mac | default ('')}, recursive=true)] }}"
  when: not vars.os_customization_for_ip and vars.mac is defined

- name: Do not update VM network when no IP or MAC are added based on inventory, adding network to the list
  set_fact:
    new_networks: "{{ new_networks + [community_vmware_vmware__guest.networks] }}"
    new_networks_with_mac: "{{ new_networks + [community_vmware_vmware__guest.networks] }}"
  when: not vars.os_customization_for_ip and vars.mac is not defined

- name: Show added IPs and MACs
  debug:
    msg: "IP: {{ vars.ip | default ('Not defined')}}, MAC: {{ vars.mac | default ('Not defined') }}"

- name: Deploy the VM including retry and rescue
  block:

  - name: Deploy the VM from a regular template
    throttle: "{{ parallel_deployments }}"
    retries: 3
    delay: 10
    community.vmware.vmware_guest:
      validate_certs: "{{ validate_certs | default(false) }}"
      hostname: "{{ vcenter_hostname | default(lookup('env', 'VMWARE_HOST')) }}"
      username: "{{ vcenter_username | default(lookup('env', 'VMWARE_USER')) }}"
      password: "{{ vcenter_password | default(lookup('env', 'VMWARE_PASSWORD')) }}"
      datacenter: "{{ vars.community_vmware_vmware__guest.datacenter }}"
      cluster: "{{ vars.community_vmware_vmware__guest.cluster }}"
      folder: "{{ vars.community_vmware_vmware__guest.folder | default('vm') }}"
      name: "{{ inventory_hostname_short }}"
      state: "{{ vars.community_vmware_vmware__guest.state | default('poweredon') }}"
      template: "{{ vars.community_vmware_vmware__guest.template | default('v') }}"
      disk: "{{ vars.community_vmware_vmware__guest.disk }}"
      # - size_gb: 30
      #   type: eagerzeroedthick # thin, thick, eagerzeroedthick
      #   datastore: RDL3PAR01_ESXCORE_VMFS_L101
      # # Add another disk from an existing VMDK
      # #- filename: "[datastore1] testvms/testvm_2_1/testvm_2_1.vmdk"
      hardware:
        memory_mb: "{{ vars.community_vmware_vmware__guest.hardware.memory_mb | default('4096') }}"
        num_cpus: "{{ vars.community_vmware_vmware__guest.hardware.num_cpus | default('1') }}"
        num_cpu_cores_per_socket: "{{ vars.community_vmware_vmware__guest.hardware.num_cpu_cores_per_socket | default('1') }}"
        scsi: "{{ vars.community_vmware_vmware__guest.hardware.scsi | default('paravirtual') }}"
        # memory_reservation_lock: true
        # mem_limit: 8096
        # mem_reservation: 4096
        # cpu_limit: 8096
        # cpu_reservation: 4096
        max_connections: "{{ vars.community_vmware_vmware__guest.hardware.max_connections | default('5') }}"
        # hotadd_cpu: True
        # hotremove_cpu: True
        # hotadd_memory: False
        version: "{{ vars.community_vmware_vmware__guest.hardware.version | default('14') }}" # Hardware version of virtual machine
        boot_firmware: "{{ vars.community_vmware_vmware__guest.hardware.boot_firmware | default('efi') }}"
      # cdrom:
      #     - controller_number: 0
      #       unit_number: 0
      #       state: present
      #       type: iso
      #       iso_path: "[datastore1] livecd.iso"
      #networks: "{{ vars.new_networks }}" #| default( default_vmware_portgroup ) }}"
      customization: "{{ vars.community_vmware_vmware__guest.customization | default ({}) }}"
      advanced_settings: "{{ vars.community_vmware_vmware__guest.advanced_settings | default ({}) }}"

      wait_for_ip_address: "{{ vars.community_vmware_vmware__guest.wait_for_ip_address | default(false) }}"

    delegate_to: localhost
    register: deploy
    failed_when: vars.os_customization_for_ip and not (vars.ip in (deploy.instance.hw_eth0.ipaddresses ))
  
  rescue:
  - name: Remove the VM prior to retry
    community.vmware.vmware_guest:
      validate_certs: "{{ validate_certs | default(false) }}"
      hostname: "{{ vcenter_hostname | default(lookup('env', 'VMWARE_HOST')) }}"
      username: "{{ vcenter_username | default(lookup('env', 'VMWARE_USER')) }}"
      password: "{{ vcenter_password | default(lookup('env', 'VMWARE_PASSWORD')) }}"
      datacenter: "{{ vars.community_vmware_vmware__guest.datacenter }}"
      cluster: "{{ vars.community_vmware_vmware__guest.cluster }}"
      folder: "{{ vars.community_vmware_vmware__guest.folder | default('vm') }}"
      name: "{{ inventory_hostname_short }}"
      state: absent
      force: yes
    delegate_to: localhost
    when: vars.delete_during_retry


# - name: Add VMNics
#   throttle: "{{ parallel_deployments }}"
#   retries: 3
#   delay: 10
#   community.vmware.vmware_guest_network:
#     validate_certs: "{{ validate_certs | default(false) }}"
#     hostname: "{{ vcenter_hostname | default(lookup('env', 'VMWARE_HOST')) }}"
#     username: "{{ vcenter_username | default(lookup('env', 'VMWARE_USER')) }}"
#     password: "{{ vcenter_password | default(lookup('env', 'VMWARE_PASSWORD')) }}"
#     name: "{{ inventory_hostname_short }}"
#     state: present
#     #network_name: "{{ item.name }}"
#     vlan_id: 665
#     device_type: "{{ item.device_type | default('vmxnet3') }}"
#     connected: "{{ item.connected | default('true') }}"
#     start_connected: "{{ item.start_connected | default('true') }}"
#     mac_address: "{{ vars.mac | default (omit)}}"
#     gather_network_info : false

#   delegate_to: localhost
#   register: deploy_macchange
#   with_items: "{{ vars.community_vmware_vmware__guest.networks }}"

# - ansible.builtin.pause:


- name: Show hosts with fixed MAC addresses
  debug:
    msg: "IP: {{ vars.ip | default ('Not defined')}}, MAC: {{ vars.mac | default ('Not defined') }}, current MAC {{ deploy.instance.hw_eth0.macaddress | default('') }}"
  when: vars.mac is defined

- name: Get VM facts
  retries: 3
  delay: 10
  community.vmware.vmware_guest_network:
    validate_certs: "{{ validate_certs | default(false) }}"
    hostname: "{{ vcenter_hostname | default(lookup('env', 'VMWARE_HOST')) }}"
    username: "{{ vcenter_username | default(lookup('env', 'VMWARE_USER')) }}"
    password: "{{ vcenter_password | default(lookup('env', 'VMWARE_PASSWORD')) }}"  
    datacenter: "{{ vars.community_vmware_vmware__guest.datacenter }}"
    name: "RDLDC01" #"{{ inventory_hostname_short }}"
    gather_network_info : true
  delegate_to: localhost
  register: facts_post_deploy
  when: vars.mac is defined

# - name: Show hosts with fixed MAC addresses
#   debug:
#     msg: "{{ facts_post_deploy }}"


- name: Remove current vNICs
  throttle: "{{ parallel_deployments }}"
  retries: 3
  delay: 10
  community.vmware.vmware_guest_network:
    validate_certs: "{{ validate_certs | default(false) }}"
    hostname: "{{ vcenter_hostname | default(lookup('env', 'VMWARE_HOST')) }}"
    username: "{{ vcenter_username | default(lookup('env', 'VMWARE_USER')) }}"
    password: "{{ vcenter_password | default(lookup('env', 'VMWARE_PASSWORD')) }}"
    name: "{{ inventory_hostname_short }}"
    mac_address: "{{ deploy.instance.hw_eth0.macaddress }}"
    gather_network_info : false
    state: absent

  delegate_to: localhost
  register: deploy_macchange
  when: vars.mac is defined
  with_items: "{{ deploy.instance.hw_interfaces }}"

- name: Change hosts with fixed MAC addresses
  throttle: "{{ parallel_deployments }}"
  retries: 3
  delay: 10
  community.vmware.vmware_guest_network:
    validate_certs: "{{ validate_certs | default(false) }}"
    hostname: "{{ vcenter_hostname | default(lookup('env', 'VMWARE_HOST')) }}"
    username: "{{ vcenter_username | default(lookup('env', 'VMWARE_USER')) }}"
    password: "{{ vcenter_password | default(lookup('env', 'VMWARE_PASSWORD')) }}"
    name: "{{ inventory_hostname_short }}"
    #network_name: "{{ vars.new_networks_with_mac[0].name }}"
    vlan_id: 665
    mac_address: "{{ vars.new_networks_with_mac[0].mac }}"
    gather_network_info : false
    state: present

  delegate_to: localhost
  register: deploy_macchange
  when: vars.mac is defined
