
- name: Deploy OpenShift example projects
  hosts: localhost
  gather_facts: false
  vars_files:
  - passwords/ansible_vault.yml
  - vars/network-config.yml
  - group_vars/openshift_upi_vms.yml
  - group_vars/vcenter_vms.yml
  environment:
    KUBECONFIG: "{{ vars.openshift_config_dir }}/auth/kubeconfig"
  tasks:

  - name: Create examples dir
    file:
      path: "{{ item }}"
      state: directory
    with_items:
    - "{{ vars.openshift_example_dir }}"


  - name: Deploy example projects
    tags: deploy_example_all, deploy_example_http
    block:

    # Quick Nginx Hello World HTTP CLI
    - name: Add Nginx Hello World HTTP app through CLI
      shell: |
        oc new-project test-nginx-http-cli
        oc project test-nginx-http-cli
        oc new-app --name hello-world-nginx https://github.com/RedHatTraining/DO280-apps --context-dir hello-world-nginx
        oc expose service hello-world-nginx
        sleep 60
      ignore_errors: yes

    - name: Query Nginx HTTP CLI example
      include_tasks: 'tasks/query_url.yml'
      with_items:
      - url: "http://hello-world-nginx-test-nginx-http-cli.apps.{{ openshift_cluster_name }}.{{ openshift_cluster_domain }}"
        text_to_find: "Hello, world from nginx!"


    # Quick Nginx Hello World HTTP Ansible
    - name: Nginx Hello World HTTP app from source through Ansible  
      vars:
        app_name: hello-world-nginx
        app_namespace: test-nginx-http-ansible
        app_git_source: https://github.com/RedHatTraining/DO280-apps 
        app_git_contextdir: hello-world-nginx
        app_tag_name: hello-world-nginx:latest
        app_build_on_tag_name: registry.access.redhat.com/ubi8:8.0 # ubi8:8.0
        app_service_port: 8080
        app_service_protocol: tcp
        app_container_port: 8080
        app_generic_secret: UizJ9CQw5Oyd5uza9Hgy #"{{ lookup ('password', '/dev/null chars=ascii_letters length=24') }}"
      block:

      - name: Add namespace for Nginx Hello World HTTP app from source through Ansible 
        kubernetes.core.k8s:
          state: present
          template: 'templates/openshift_4_resource_namespace.yml'
          
      - name: Split build image's source if specified...
        set_fact:
          app_build_on_tag_name_source: "{{ app_build_on_tag_name.split('/')[0] }}/"
          app_build_on_tag_name_image: "{{ app_build_on_tag_name.split('/')[1] }}"
        when: app_build_on_tag_name is search("/")

      - name: ... or resort to defaults
        set_fact:
          app_build_on_tag_name_source: ""
          app_build_on_tag_name_image: "{{ app_build_on_tag_name }}"
        when: not app_build_on_tag_name is search("/")

      - name: Add BuildConfig
        kubernetes.core.k8s:
          state: present
          template: 'templates/openshift_4_resource_buildconfig.yml'
      
      - name: "Import tags of dependant image '{{ app_build_on_tag_name_source + app_build_on_tag_name_image }}' into image stream"
        community.okd.openshift_import_image:
          namespace: "{{ app_namespace }}"
          name: "{{ app_build_on_tag_name_image }}" # include tag for IS or ISTag 'latest' is picked!
          source: "{{ app_build_on_tag_name_source + app_build_on_tag_name_image }}"

      - name: "Import tags of required image '{{ app_tag_name }}' into image stream"
        community.okd.openshift_import_image:
          namespace: "{{ app_namespace }}"
          name: "{{ app_tag_name}}"
          source: "{{ app_tag_name }}"

      - name: Wait until the built ImageStreamTag is available
        kubernetes.core.k8s_info:
          api_version: image.openshift.io/v1
          kind: ImageStreamTag
          name: "{{ app_tag_name }}"
          namespace: "{{ app_namespace }}"
        register: app_imagestream
        until: app_imagestream.resources[0].image.dockerImageReference is defined
        retries: 20
        delay: 30

      - name: Set Image reference
        set_fact:
          app_container_source: "{{ app_imagestream.resources[0].image.dockerImageReference }}"

      - name: Add Deployment
        kubernetes.core.k8s:
          api_version: apps/v1
          template: 'templates/openshift_4_resource_deployment.yml'

      - name: Add Service
        kubernetes.core.k8s:
          state: present
          template: 'templates/openshift_4_resource_service.yml'

      - name: Add Route
        kubernetes.core.k8s:
          state: present
          template: 'templates/openshift_4_resource_route.yml'

      - name: Query Nginx HTTP Ansible example
        include_tasks: 'tasks/query_url.yml'
        with_items:
        - url: "http://hello-world-nginx-test-nginx-http-ansible.apps.{{ openshift_cluster_name }}.{{ openshift_cluster_domain }}"
          text_to_find: "Hello, world from nginx!"


  - name: Deploy example projects
    tags: deploy_example_all, deploy_example_https
    block:

    # Quick Nginx Hello World HTTPS CLI
    - name: Add Nginx Hello World HTTPS app through CLI
      shell: |
        oc new-project test-nginx-https-cli
        oc project test-nginx-https-cli
        openssl req -nodes -x509 -newkey rsa:4096 -keyout {{ openshift_example_dir }}/hello-secure-key.pem -out {{ openshift_example_dir }}/hello-secure-combined.pem -days 365 -subj '/CN=hello-secure'
        oc new-app --name hello-secure quay.io/redhattraining/hello-world-secure:v1.0
        oc create secret tls hello-secure --cert {{ openshift_example_dir }}/hello-secure-combined.pem --key {{ openshift_example_dir }}/hello-secure-key.pem
        oc set volumes deployment/hello-secure --add --type secret --secret-name hello-secure --mount-path /run/secrets/nginx
        oc create route passthrough hello-secure --service hello-secure --hostname hello-world-nginx-test-nginx-https-cli.apps.{{ openshift_cluster_name }}.{{ openshift_cluster_domain }}
      ignore_errors: yes

    - name: Query Nginx HTTPS CLI example
      include_tasks: 'tasks/query_url.yml'
      with_items:
      - url: "https://hello-world-nginx-test-nginx-https-cli.apps.{{ openshift_cluster_name }}.{{ openshift_cluster_domain }}"
        text_to_find: "Hello, world from nginx!"


    # Quick Nginx Hello World HTTPS Ansible
    - name: Nginx Hello World HTTPS app through Ansible  
      vars:
        app_name: hello-secure
        app_namespace: test-nginx-https-ansible
        app_git_source: quay.io/redhattraining/hello-world-secure:v1.0
        app_git_contextdir:
        app_tag_name: hello-secure:v1.0
        app_service_port: 8443
        app_service_protocol: tcp
        app_container_port: 8443
        app_secret_name: "{{ app_name }}-secret"
        app_secret_tls_crt: "hello-secure-combined.pem"
        app_secret_tls_key: "hello-secure-key.pem"
        app_volumeMounts:
        - mountPath: /run/secrets/nginx
          name: volume-tls
        app_volumes:
        - name: volume-tls
          secret:
            defaultMode: 420
            secretName: "{{ app_name }}"
        app_route_ssl_termination: passthrough
        app_route_hostname: "hello-world-nginx-test-nginx-https-ansible.apps.{{ openshift_cluster_name }}.{{ openshift_cluster_domain }}"

      block:

      - name: Add namespace for Nginx Hello World HTTPS app through Ansible  
        kubernetes.core.k8s:
          state: present
          template: 'templates/openshift_4_resource_namespace.yml'
  
      - name: "Import tags of required image '{{ app_tag_name }}' into image stream"
        community.okd.openshift_import_image:
          namespace: "{{ app_namespace }}"
          name: "{{ app_tag_name}}"
          source: "{{ app_git_source }}"

      - name: Check certificate key
        stat:
          path: "{{ openshift_example_dir }}/{{ app_secret_tls_key }}"
        register: local_cert_key

      - name: Check certificate 
        stat:
          path: "{{ openshift_example_dir }}/{{ app_secret_tls_crt }}"
        register: local_cert

      - name: Create a new certificate if it does not exist
        shell: "openssl req -nodes -x509 -newkey rsa:4096 -keyout {{ openshift_example_dir }}/{{ app_secret_tls_key }} -out {{ openshift_example_dir }}/{{ app_secret_tls_crt }} -days 365 -subj '/CN={{ app_name }}'"
        when: not local_cert_key.stat.exists or not local_cert.stat.exists

      - name: Add TLS secret
        kubernetes.core.k8s:
          state: present
          template: 'templates/openshift_4_resource_secret_tls.yml'

      - name: Wait until the ImageStreamTag is available
        kubernetes.core.k8s_info:
          api_version: image.openshift.io/v1
          kind: ImageStreamTag
          name: "{{ app_tag_name }}"
          namespace: "{{ app_namespace }}"
        register: app_imagestream
        until: app_imagestream.resources[0].image.dockerImageReference is defined
        retries: 20
        delay: 30

      - name: Set Image reference
        set_fact:
          app_container_source: "{{ app_imagestream.resources[0].image.dockerImageReference }}"
          
      - name: Add Deployment
        kubernetes.core.k8s:
          api_version: apps/v1
          template: 'templates/openshift_4_resource_deployment.yml'

      - name: Add Service
        kubernetes.core.k8s:
          state: present
          template: 'templates/openshift_4_resource_service.yml'

      - name: Add Route
        kubernetes.core.k8s:
          state: present
          template: 'templates/openshift_4_resource_route_ssl.yml'

      - name: Query Nginx HTTPS Ansible example
        include_tasks: 'tasks/query_url.yml'
        with_items:
        - url: "https://hello-world-nginx-test-nginx-https-ansible.apps.{{ openshift_cluster_name }}.{{ openshift_cluster_domain }}"
          text_to_find: "Hello, world from nginx!"
                    

  - name: Deploy example projects
    tags: deploy_example_all, deploy_example_todo
    block:

    # ToDo CLI
    - name: Add ToDo app through CLI
      shell: |
        oc new-project test-todo-http-cli
        oc project test-todo-http-cli
        cat > {{ openshift_example_dir }}/todo-http.yaml <<EOL
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: todo-http
          labels:
            app: todo-http
            name: todo-http
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: todo-http
              name: todo-http
          template:
            metadata:
              labels:
                app: todo-http
                name: todo-http
            spec:
              containers:
              - resources:
                  limits:
                    cpu: '0.5'
                image: quay.io/redhattraining/todo-angular:v1.1
                name: todo-http
                ports:
                - containerPort: 8080
                  name: todo-http
        ---
        apiVersion: v1
        kind: Service
        metadata:
          labels:
            app: todo-http
            name: todo-http
          name: todo-http
        spec:
          ports:
          - port: 80
            protocol: TCP
            targetPort: 8080
          selector:
            name: todo-http
        EOL
        oc create -f {{ openshift_example_dir }}/todo-http.yaml
        oc expose svc todo-http

      ignore_errors: yes

    - name: Query ToDo CLI example
      include_tasks: 'tasks/query_url.yml'
      with_items:
      - url: "http://todo-http-test-todo-http-cli.apps.{{ openshift_cluster_name }}.{{ openshift_cluster_domain }} | grep -B 2 -A 2 -i 'ToDo App'"
        text_to_find: '<a class="navbar-brand" href="/">ToDo App</a>'
                  

    # ToDo Ansible
    - name: ToDo app through Ansible  
      vars:
        app_name: todo-http
        app_namespace: test-todo-http-ansible
        app_container_source: quay.io/redhattraining/todo-angular:v1.1
        app_service_port: 80
        app_service_protocol: tcp
        app_container_port: 8080
        app_resources:
          limits:
            cpu: '0.5'
      block:

      - name: Add namespace for ToDo app through Ansible  
        kubernetes.core.k8s:
          state: present
          template: 'templates/openshift_4_resource_namespace.yml'
          
      - name: Add Deployment
        kubernetes.core.k8s:
          api_version: apps/v1
          template: 'templates/openshift_4_resource_deployment.yml'

      - name: Add Service
        kubernetes.core.k8s:
          state: present
          template: 'templates/openshift_4_resource_service.yml'

      - name: Add Route
        kubernetes.core.k8s:
          state: present
          template: 'templates/openshift_4_resource_route.yml'

      - name: Query ToDo Ansible example
        include_tasks: 'tasks/query_url.yml'
        with_items:
        - url: "http://todo-http-test-todo-http-ansible.apps.{{ openshift_cluster_name }}.{{ openshift_cluster_domain }} | grep -B 2 -A 2 -i 'ToDo App'"
          text_to_find: '<a class="navbar-brand" href="/">ToDo App</a>'



  - name: Deploy example projects
    tags: deploy_example_all, deploy_example_wordpress
    block:

    # WordPress on MySQL CLI
    - name: Add WordPress on MySQL app through CLI
      shell: |
        oc new-project test-wordpress-mysql-cli
        oc project test-wordpress-mysql-cli

        oc create secret generic mysql --from-literal password=r3dh4t123

        oc new-app --name mysql registry.access.redhat.com/rhscl/mysql-57-rhel7:5.7
        oc set env deployment/mysql --from secret/mysql --prefix MYSQL_ROOT_
        oc set volumes deployment/mysql --add --type pvc --claim-mode rwo --claim-size 2Gi --mount-path /var/lib/mysql/data

        sleep 90s

        oc new-app --name wordpress --docker-image docker.io/library/wordpress:5.3.0 -e WORDPRESS_DB_HOST=mysql -e WORDPRESS_DB_NAME=wordpress -e WORDPRESS_DB_USER=root
        oc set env deployment/wordpress --from secret/mysql --prefix WORDPRESS_DB_
        oc create sa wordpress-sa
        oc adm policy add-scc-to-user anyuid -z wordpress-sa
        oc set serviceaccount deployment/wordpress wordpress-sa
        oc expose svc wordpress --hostname wordpress-cli.apps.{{ openshift_cluster_name }}.{{ openshift_cluster_domain }}

        sleep 10s
      ignore_errors: yes

    - name: Query WordPress on MySQL CLI example
      include_tasks: 'tasks/query_url.yml'
      with_items:
      - url: "http://wordpress-cli.apps.{{ openshift_cluster_name }}.{{ openshift_cluster_domain }}/wp-admin/install.php | grep -B 2 -A 2 -i '<title>'"
        text_to_find: "<title>"


    # WordPress on MySQL Ansible - Part 1
    - name: Add WordPress on MySQL app through Ansible
      vars:
        app_namespace: test-wordpress-mysql-ansible
        app_name: mysql
        app_secret_name: "{{ app_name }}-secret"
        app_secret_literals:
          password: "{{ 'r3dh4t123' | b64encode }}"
        app_container_source: registry.access.redhat.com/rhscl/mysql-57-rhel7:5.7
        app_envarguments:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: "{{ app_name }}-secret"
        app_service_port: 3306
        app_service_protocol: tcp
        app_container_port: 3306
        app_pvc_name: "{{ app_name }}-pvc"
        app_pvc_accessmode: ReadWriteOnce
        app_pvc_size: 2Gi
        app_pvc_storageClassName: thin
        app_pvc_mount_path: 
        app_volumeMounts:
        - mountPath: /var/lib/mysql/data
          name: "{{ app_name }}-pv"
        app_volumes:
        - name: "{{ app_name }}-pv"
          persistentVolumeClaim:
            claimName: "{{ app_name }}-pvc"

      block:

      - name: Add namespace for WordPress on MySQL app through Ansible
        kubernetes.core.k8s:
          state: present
          template: 'templates/openshift_4_resource_namespace.yml'
  
      - name: Add literal secret
        kubernetes.core.k8s:
          state: present
          template: 'templates/openshift_4_resource_secret_literal.yml'
          
      - name: Add PVC
        kubernetes.core.k8s:
          state: present
          template: 'templates/openshift_4_resource_persistentvolumeclaim.yml'
          
      - name: Add Deployment
        kubernetes.core.k8s:
          api_version: apps/v1
          template: 'templates/openshift_4_resource_deployment.yml'

      - name: Add Service
        kubernetes.core.k8s:
          state: present
          template: 'templates/openshift_4_resource_service.yml'

      - name: Pause for the MySQL containers to start up
        pause:
          seconds: 90

    # WordPress on MySQL Ansible - Part 2
    - name: Add WordPress on MySQL app through Ansible
      vars:
        app_namespace: test-wordpress-mysql-ansible
        app_name: wordpress
        app_container_source: docker.io/library/wordpress:5.3.0
        app_envarguments:
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: mysql-secret
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_NAME
          value: wordpress
        - name: WORDPRESS_DB_USER
          value: root
        app_service_port: 80
        app_service_protocol: tcp
        app_container_port: 80
        app_route_hostname: "wordpress-ansible.apps.{{ openshift_cluster_name }}.{{ openshift_cluster_domain }}"
        app_sa_name: wordpress-sa
        app_sa_scc: anyuid

      block:

      - name: Add Service Account
        kubernetes.core.k8s:
          api_version: apps/v1
          template: 'templates/openshift_4_resource_serviceaccount.yml'

      - name: Add SCC to  Service Account
        kubernetes.core.k8s:
          api_version: apps/v1
          template: 'templates/openshift_4_resource_scc_to_user.yml'

      - name: Add Deployment
        kubernetes.core.k8s:
          api_version: apps/v1
          template: 'templates/openshift_4_resource_deployment.yml'

      - name: Add Service
        kubernetes.core.k8s:
          state: present
          template: 'templates/openshift_4_resource_service.yml'

      - name: Add Route
        kubernetes.core.k8s:
          state: present
          template: 'templates/openshift_4_resource_route.yml'

      - name: Pause for the Wordpress containers to start up
        pause: 
          seconds: 10

      - name: Query WordPress on MySQL Ansible example
        include_tasks: 'tasks/query_url.yml'
        with_items:
        - url: "http://wordpress-ansible.apps.{{ openshift_cluster_name }}.{{ openshift_cluster_domain }}/wp-admin/install.php | grep -B 2 -A 2 -i '<title>'"
          text_to_find: "<title>"




  - name: Deploy example projects
    tags: deploy_example_all, deploy_example_wordpress_netpol
    block:

    # WordPress on MySQL CLI
    - name: Add WordPress on MySQL with Network Policies app through CLI
      shell: |
        oc new-project test-wordpress-mysql-netpol-cli
        oc project test-wordpress-mysql-netpol-cli

        cat > {{ openshift_example_dir }}/networkpol_deny_all.yaml <<EOL
        kind: NetworkPolicy
        apiVersion: networking.k8s.io/v1
        metadata:
          name: deny-by-default
        spec:
          podSelector: {}
          ingress: []
        EOL
        oc create -f {{ openshift_example_dir }}/networkpol_deny_all.yaml
        cat > {{ openshift_example_dir }}/networkpol_allow_wordpress_mysql.yaml <<EOL
        kind: NetworkPolicy
        apiVersion: networking.k8s.io/v1
        metadata:
          name: allow-wordpress-mysql
        spec:
          podSelector:
            matchLabels:
              deployment: mysql
          ingress:
          - from:
            - podSelector:
                matchLabels:
                  deployment: wordpress
            ports:
            - port: 3306
              protocol: TCP
        EOL
        oc create -f {{ openshift_example_dir }}/networkpol_allow_wordpress_mysql.yaml
        cat > {{ openshift_example_dir }}/networkpol_allow_ingress.yaml <<EOL
        apiVersion: networking.k8s.io/v1
        kind: NetworkPolicy
        metadata:
          name: allow-ingress-to-wordpress
        spec:
          podSelector:
            matchLabels:
              deployment: wordpress
          ingress:
          - ports:
            - protocol: TCP
              port: 80
            - protocol: TCP
              port: 443
        EOL
        oc create -f {{ openshift_example_dir }}/networkpol_allow_ingress.yaml

        oc create secret generic mysql --from-literal password=r3dh4t123

        oc new-app --name mysql registry.access.redhat.com/rhscl/mysql-57-rhel7:5.7
        oc set env deployment/mysql --from secret/mysql --prefix MYSQL_ROOT_
        oc set volumes deployment/mysql --add --type pvc --claim-mode rwo --claim-size 2Gi --mount-path /var/lib/mysql/data

        sleep 90s

        oc new-app --name wordpress --docker-image docker.io/library/wordpress:5.3.0 -e WORDPRESS_DB_HOST=mysql -e WORDPRESS_DB_NAME=wordpress -e WORDPRESS_DB_USER=root
        oc set env deployment/wordpress --from secret/mysql --prefix WORDPRESS_DB_
        oc create sa wordpress-sa
        oc adm policy add-scc-to-user anyuid -z wordpress-sa
        oc set serviceaccount deployment/wordpress wordpress-sa
        oc expose svc wordpress --hostname wordpress-netpol-cli.apps.{{ openshift_cluster_name }}.{{ openshift_cluster_domain }}

        sleep 10s
      ignore_errors: yes

    - name: Query WordPress on MySQL with Network Policies CLI example
      include_tasks: 'tasks/query_url.yml'
      with_items:
      - url: "http://wordpress-netpol-cli.apps.{{ openshift_cluster_name }}.{{ openshift_cluster_domain }}/wp-admin/install.php | grep -B 2 -A 2 -i '<title>'"
        text_to_find: "<title>"


    # WordPress on MySQL with Network Policies Ansible - Part 1
    - name: Add WordPress on MySQL app with Network Policies through Ansible
      vars:
        app_namespace: test-wordpress-mysql-netpol-ansible
        app_name: mysql
        app_secret_name: "{{ app_name }}-secret"
        app_secret_literals:
          password: "{{ 'r3dh4t123' | b64encode }}"
        app_container_source: registry.access.redhat.com/rhscl/mysql-57-rhel7:5.7
        app_envarguments:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: "{{ app_name }}-secret"
        app_service_port: 3306
        app_service_protocol: tcp
        app_container_port: 3306
        app_pvc_name: "{{ app_name }}-pvc"
        app_pvc_accessmode: ReadWriteOnce
        app_pvc_size: 2Gi
        app_pvc_storageClassName: thin
        app_pvc_mount_path: 
        app_volumeMounts:
        - mountPath: /var/lib/mysql/data
          name: "{{ app_name }}-pv"
        app_volumes:
        - name: "{{ app_name }}-pv"
          persistentVolumeClaim:
            claimName: "{{ app_name }}-pvc"
        app_networkpolicies:
        - name: deny-by-default
          destination: ""
          source: ""
        - name: allow-wordpress-mysql
          destination:
            matchLabels:
              deployment: mysql
          source:
          - from:
            - podSelector:
                matchLabels:
                  deployment: wordpress
            ports:
            - port: 3306
              protocol: TCP
        - name: allow-ingress-to-wordpress
          destination:
            matchLabels:
              deployment: wordpress
          source:
          - ports:
            - protocol: TCP
              port: 80
            - protocol: TCP
              port: 443



      block:

      - name: Add namespace for WordPress on MySQL app with Network Policies through Ansible
        kubernetes.core.k8s:
          state: present
          template: 'templates/openshift_4_resource_namespace.yml'
  
      - name: Add Network Policies
        kubernetes.core.k8s:
          state: present
          template: 'templates/openshift_4_resource_networkpolicy.yml'
        with_items: "{{ app_networkpolicies }}"
          
      - name: Add literal secret
        kubernetes.core.k8s:
          state: present
          template: 'templates/openshift_4_resource_secret_literal.yml'
          
      - name: Add PVC
        kubernetes.core.k8s:
          state: present
          template: 'templates/openshift_4_resource_persistentvolumeclaim.yml'
          
      - name: Add Deployment
        kubernetes.core.k8s:
          api_version: apps/v1
          template: 'templates/openshift_4_resource_deployment.yml'

      - name: Add Service
        kubernetes.core.k8s:
          state: present
          template: 'templates/openshift_4_resource_service.yml'

      - name: Pause for the MySQL containers to start up
        pause: 
          seconds: 90


    # WordPress on MySQL with Network Policies Ansible - Part 2
    - name: Add WordPress on MySQL app through Ansible
      vars:
        app_namespace: test-wordpress-mysql-netpol-ansible
        app_name: wordpress
        app_container_source: docker.io/library/wordpress:5.3.0
        app_envarguments:
        - name: WORDPRESS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: mysql-secret
        - name: WORDPRESS_DB_HOST
          value: mysql
        - name: WORDPRESS_DB_NAME
          value: wordpress
        - name: WORDPRESS_DB_USER
          value: root
        app_service_port: 80
        app_service_protocol: tcp
        app_container_port: 80
        app_route_hostname: "wordpress-netpol-ansible.apps.{{ openshift_cluster_name }}.{{ openshift_cluster_domain }}"
        app_sa_name: wordpress-sa
        app_sa_scc: anyuid

      block:

      - name: Add Service Account
        kubernetes.core.k8s:
          api_version: apps/v1
          template: 'templates/openshift_4_resource_serviceaccount.yml'

      - name: Add SCC to  Service Account
        kubernetes.core.k8s:
          api_version: apps/v1
          template: 'templates/openshift_4_resource_scc_to_user.yml'

      - name: Add Deployment
        kubernetes.core.k8s:
          api_version: apps/v1
          template: 'templates/openshift_4_resource_deployment.yml'

      - name: Add Service
        kubernetes.core.k8s:
          state: present
          template: 'templates/openshift_4_resource_service.yml'

      - name: Add Route
        kubernetes.core.k8s:
          state: present
          template: 'templates/openshift_4_resource_route.yml'

      - name: Pause for the Wordpress containers to start up
        pause: 
          seconds: 10

      - name: Query WordPress on MySQL Ansible example
        include_tasks: 'tasks/query_url.yml'
        with_items:
        - url: "http://wordpress-netpol-ansible.apps.{{ openshift_cluster_name }}.{{ openshift_cluster_domain }}/wp-admin/install.php | grep -B 2 -A 2 -i '<title>'"
          text_to_find: "<title>"



# ToDo:
# - app_git_contextdir: omit to be added