--- 
- import_playbook: tasks/check_all.yml


- name: Check OpenShift deployment status
  hosts: openshift_clusters
  gather_facts: false
  vars_files:
  - passwords/ansible_vault.yml
  - vars/network-config.yml
  - group_vars/vcenter_vms.yml
  environment:
    KUBECONFIG: "{{ vars.openshift_config_dir }}/auth/kubeconfig"
  tasks:

  - name: Combine customized VM config
    set_fact:
      community_vmware_vmware__guest: "{{ default_community_vmware_vmware__guest | combine(custom_community_vmware_vmware__guest | default({}), recursive=true) }}"
      ansible_becomes_password: "{{ client_password }}"
    tags: always

  - name: Check whether OpenShift cluster exists already
    tags: always
    delegate_to: localhost
    block:

    - name: Check whether OpenShift cluster exists already
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Namespace
        name: openshift-kube-apiserver
      register: namespace_kube_apiserver
      delay: 10
      retries: 3
      ignore_errors: yes

    - name: "Halt when namespace 'openshift-kube-apiserver' does not already exists"
      fail:
        msg: "Namespace 'openshift-kube-apiserver' does not already exists, deploy it first!"
      when:  namespace_kube_apiserver.failed or namespace_kube_apiserver.resources[0].status.phase | default('') != "Active"

  - name: Deploy pre-reqs
    delegate_to: localhost
    tags: pre_reqs_network
    block:

    - name: Deploy DHCP reservations
      ansible.builtin.import_tasks: tasks/deploy-windows-dhcp-reservations.yml
      tags: deploy_infrastructure_dhcp
      
    - name: Deploy NSX segments
      ansible.builtin.include_tasks:
        file: tasks/deploy-vmware-nsx-overlay-segments.yml
        apply:
          tags: vm
      tags: vm, deploy_nsx_segments
      vars:
        ansible_python_interpreter: /usr/bin/python3.9
      when: nsx_integration
      

- name: Deploy the network to the worker nodes
  hosts: openshift_worker_nodes
  gather_facts: false
  vars_files:
  - passwords/ansible_vault.yml
  - vars/network-config.yml
  - group_vars/vcenter_vms.yml
  environment:
    KUBECONFIG: "{{ vars.openshift_config_dir }}/auth/kubeconfig"
  tasks:

  - name: Deploy VMs
    tags: vm
    ansible.builtin.include_tasks:
      file: tasks/deploy-vmware-vnic-to-vm.yml
      apply:
        tags: vm


- name: Deploy OpenShift configuration for the additional network
  hosts: openshift_bootstrap_nodes
  gather_facts: false
  vars_files:
  - passwords/ansible_vault.yml
  - vars/network-config.yml
  - group_vars/vcenter_vms.yml
  environment:
    KUBECONFIG: "{{ vars.openshift_config_dir }}/auth/kubeconfig"
  tasks:

  - name: Deploy the DHCP shim to the clusters using 'dhcp' IPAM
    tags: deploy_dhcp_shim
    delegate_to: localhost
    kubernetes.core.k8s:
      api_version: operator.openshift.io/v1
      template: 'templates/openshift_4_resource_dhcp-shim.yml'
    register: network_operator_config

  # - name: If network-operator was changed, wait 5 minutes before proceeding so the operator can reconfigure
  #   pause:
  #     minutes: 5
  #   when: network_operator_config.changed


  # Example app using an additional network
  - name: Example app using the additional network with 'dhcp' IPAM
    tags: deploy_example_dhcp
    delegate_to: localhost
    vars:
      app_name: todo-http
      app_namespace: test-todo-http-ansible-additionalnetwork
      app_container_source: quay.io/redhattraining/todo-angular:v1.1
      app_service_port: 80
      app_service_protocol: tcp
      app_container_port: 8080
      app_resources:
        limits:
          cpu: '0.5'
      app_annotations:
        k8s.v1.cni.cncf.io/networks: network-second-nic
      app_nodeSelector:
        dedicated-node: MOCK
      network_name: network-second-nic # lower case alphanumeric, '-', or '.'
      # app_annotations:
      #   k8s.v1.cni.cncf.io/networks: VLAN669-RD Labo Large
      # network_name: VLAN669-RD Labo Large
      network_nic: "{{ vars.ipam_config.nic2_dhcp.network_nic }}"
      network_ipam: "{{ vars.ipam_config.nic2_dhcp.network_ipam }}"
      

    block:

    - name: Add namespace for ToDo app through Ansible using 'dhcp' IPAM
      kubernetes.core.k8s:
        state: present
        template: 'templates/openshift_4_resource_namespace.yml'
        
    - name: Add the additional network
      kubernetes.core.k8s:
        api_version: k8s.cni.cncf.io/v1
        template: 'templates/openshift_4_resource_namespace_networkattachmentdefinition_macvlan.yml'

    - name: Set Image reference, allowing variabel precedence
      set_fact:
        app_container_source_set_fact: "{{ app_container_source }}"

    - name: Add Deployment
      kubernetes.core.k8s:
        api_version: apps/v1
        template: 'templates/openshift_4_resource_deployment.yml'
      register: app_deployment
      until: app_deployment.result.spec.template.spec.containers[0].image == vars.app_container_source_set_fact
      retries: 5
      delay: 5

    - name: Add Service
      kubernetes.core.k8s:
        state: present
        template: 'templates/openshift_4_resource_service.yml'

    - name: Add Route
      kubernetes.core.k8s:
        state: present
        template: 'templates/openshift_4_resource_route.yml'

    - name: Query ToDo Ansible example
      include_tasks: 'tasks/query_url.yml'
      with_items:
      - url: "http://{{ app_name }}-{{ app_namespace }}.apps.{{ openshift_cluster_name }}.{{ openshift_cluster_domain }} | grep -B 2 -A 2 -i 'ToDo App'"
        text_to_find: '<a class="navbar-brand" href="/">ToDo App</a>'

    - name: Get pod IPs
      kubernetes.core.k8s_info:
        api_version: v1
        kind: pod
        label_selectors:
        - "deployment = {{ app_name }}"
        namespace: "{{ app_namespace }}"
      register: pod_info

    - debug:
        msg: "Network status: {{ item.metadata.annotations['k8s.v1.cni.cncf.io/networks-status'] }}"
      when: item.metadata.annotations['k8s.v1.cni.cncf.io/networks-status'] is defined
      with_items: "{{ pod_info.resources }}"
      loop_control:
        label: "{{ item.metadata.name }}"



  # Example app using an additional network
  - name: Example app using the additional network with 'whereabouts' IPAM
    tags: deploy_example_whereabouts
    delegate_to: localhost
    vars:
      app_name: todo-http
      app_namespace: test-todo-http-ansible-additionalnetwork-whereabouts
      app_container_source: quay.io/redhattraining/todo-angular:v1.1
      app_service_port: 80
      app_service_protocol: tcp
      app_container_port: 8080
      app_resources:
        limits:
          cpu: '0.5'
      app_annotations:
        k8s.v1.cni.cncf.io/networks: network-second-nic-whereabouts
      app_nodeSelector:
        dedicated-node: MOCK
      network_name: network-second-nic-whereabouts # lower case alphanumeric, '-', or '.'
      # app_annotations:
      #   k8s.v1.cni.cncf.io/networks: VLAN669-RD Labo Large
      # network_name: VLAN669-RD Labo Large
      network_nic: "{{ vars.ipam_config.nic2_whereabouts.network_nic }}"
      network_ipam: "{{ vars.ipam_config.nic2_whereabouts.network_ipam }}"

    block:

    - name: Add namespace for ToDo app through Ansible using 'whereabouts' IPAM
      kubernetes.core.k8s:
        state: present
        template: 'templates/openshift_4_resource_namespace.yml'
        
    - name: Add the additional network
      kubernetes.core.k8s:
        api_version: k8s.cni.cncf.io/v1
        template: 'templates/openshift_4_resource_namespace_networkattachmentdefinition_macvlan.yml'

    - name: Set Image reference, allowing variabel precedence
      set_fact:
        app_container_source_set_fact: "{{ app_container_source }}"

    - name: Add Deployment
      kubernetes.core.k8s:
        api_version: apps/v1
        template: 'templates/openshift_4_resource_deployment.yml'
      register: app_deployment
      until: app_deployment.result.spec.template.spec.containers[0].image == vars.app_container_source_set_fact
      retries: 5
      delay: 5

    - name: Add Service
      kubernetes.core.k8s:
        state: present
        template: 'templates/openshift_4_resource_service.yml'

    - name: Add Route
      kubernetes.core.k8s:
        state: present
        template: 'templates/openshift_4_resource_route.yml'

    - name: Query ToDo Ansible example
      include_tasks: 'tasks/query_url.yml'
      with_items:
      - url: "http://{{ app_name }}-{{ app_namespace }}.apps.{{ openshift_cluster_name }}.{{ openshift_cluster_domain }} | grep -B 2 -A 2 -i 'ToDo App'"
        text_to_find: '<a class="navbar-brand" href="/">ToDo App</a>'

    - name: Get pod IPs
      kubernetes.core.k8s_info:
        api_version: v1
        kind: pod
        label_selectors:
        - "deployment = {{ app_name }}"
        namespace: "{{ app_namespace }}"
      register: pod_info

    - debug:
        msg: "Network status: {{ item.metadata.annotations['k8s.v1.cni.cncf.io/networks-status'] }}"
      when: item.metadata.annotations['k8s.v1.cni.cncf.io/networks-status'] is defined
      with_items: "{{ pod_info.resources }}"
      loop_control:
        label: "{{ item.metadata.name }}"



  - name: Patch the network operator to allow MultiNetworkPolicy
    tags: deploy_multinetpol
    delegate_to: localhost
    kubernetes.core.k8s_json_patch:
      api_version: operator.openshift.io/v1
      namespace: nsx-system-operator
      kind: Network
      name: cluster
      patch:
        - op: replace
          path: "/spec/useMultiNetworkPolicy"
          value: true


  # Example app using an additional network and a MultiNetworkPolicy
  - name: Example app using the additional network with 'whereabouts' IPAM, a denyall MultiNetPol `
           and allow that only allows pods to access the additional network
    tags: deploy_example_multinetpol, deploy_example_multinetpol_pods_only
    delegate_to: localhost
    vars:
      app_name: todo-http
      app_namespace: test-todo-http-ansible-multinetpol-pods
      app_container_source: quay.io/redhattraining/todo-angular:v1.1
      app_service_port: 80
      app_service_protocol: tcp
      app_container_port: 8080
      app_resources:
        limits:
          cpu: '0.5'
      app_annotations:
        k8s.v1.cni.cncf.io/networks: network-second-nic-whereabouts
      app_nodeSelector:
        dedicated-node: MOCK
      network_name: network-second-nic-whereabouts # lower case alphanumeric, '-', or '.'
      # app_annotations:
      #   k8s.v1.cni.cncf.io/networks: VLAN669-RD Labo Large
      # network_name: VLAN669-RD Labo Large
      network_nic: "{{ vars.ipam_config.nic2_whereabouts.network_nic }}"
      network_ipam: "{{ vars.ipam_config.nic2_whereabouts.network_ipam }}"
      app_multinetworkpolicies:
      # - name: deny-by-default
      #   destination: ""
      #   source: ""
      #   networkname: network-second-nic-whereabouts
      - name: allows-pods-only
        destination: ""
        source:
        - from:
          - podSelector: {}
        networkname: network-second-nic-whereabouts

    block:

    - name: Add namespace for ToDo app through Ansible  
      kubernetes.core.k8s:
        state: present
        template: 'templates/openshift_4_resource_namespace.yml'
        
    - name: Add the additional network
      kubernetes.core.k8s:
        api_version: k8s.cni.cncf.io/v1
        template: 'templates/openshift_4_resource_namespace_networkattachmentdefinition_macvlan.yml'

    - name: Set Image reference, allowing variabel precedence
      set_fact:
        app_container_source_set_fact: "{{ app_container_source }}"

    - name: Add Deployment
      kubernetes.core.k8s:
        api_version: apps/v1
        template: 'templates/openshift_4_resource_deployment.yml'
      register: app_deployment
      until: app_deployment.result.spec.template.spec.containers[0].image == vars.app_container_source_set_fact
      retries: 5
      delay: 5

    - name: Add Service
      kubernetes.core.k8s:
        state: present
        template: 'templates/openshift_4_resource_service.yml'

    - name: Add Route
      kubernetes.core.k8s:
        state: present
        template: 'templates/openshift_4_resource_route.yml'

    - name: Add MultiNetworkPolicies
      kubernetes.core.k8s:
        state: present
        template: 'templates/openshift_4_resource_multinetworkpolicy.yml'
      with_items: "{{ app_multinetworkpolicies }}"

    - name: Debug manually
      debug:
        msg: "Debug manually with 'oc run testcurl --image=redhat/ubi8 --overrides=\'{\"metadata\": {\"annotations\": {\"k8s.v1.cni.cncf.io/networks\": \"network-second-nic-whereabouts\"}},\"spec\": {\"nodeSelector\": {\"dedicated-node\": \"MOCK\"}}}\' -it -- sh' and 'curl http://<ip>:8080', IP found through 'oc describe pods'"

    - name: Get pod IPs
      kubernetes.core.k8s_info:
        api_version: v1
        kind: pod
        label_selectors:
        - "deployment = {{ app_name }}"
        namespace: "{{ app_namespace }}"
      register: pod_info

    - debug:
        msg: "Network status: {{ item.metadata.annotations['k8s.v1.cni.cncf.io/networks-status'] }}"
      when: item.metadata.annotations['k8s.v1.cni.cncf.io/networks-status'] is defined
      with_items: "{{ pod_info.resources }}"
      loop_control:
        label: "{{ item.metadata.name }}"



  
  # Example app using an additional network and a MultiNetworkPolicy
  - name: Example app using the additional network with 'whereabouts' IPAM, a denyall MultiNetPol `
           and allow that  allows pods and the additional network to access the additional network
    tags: deploy_example_multinetpol, deploy_example_multinetpol_pods_and_network
    delegate_to: localhost
    vars:
      app_name: todo-http
      app_namespace: test-todo-http-ansible-multinetpol-network
      app_container_source: quay.io/redhattraining/todo-angular:v1.1
      app_service_port: 80
      app_service_protocol: tcp
      app_container_port: 8080
      app_resources:
        limits:
          cpu: '0.5'
      app_annotations:
        k8s.v1.cni.cncf.io/networks: network-second-nic-whereabouts
      app_nodeSelector:
        dedicated-node: MOCK
      network_name: network-second-nic-whereabouts # lower case alphanumeric, '-', or '.'
      # app_annotations:
      #   k8s.v1.cni.cncf.io/networks: VLAN669-RD Labo Large
      # network_name: VLAN669-RD Labo Large
      network_nic: "{{ vars.ipam_config.nic2_whereabouts.network_nic }}"
      network_ipam: "{{ vars.ipam_config.nic2_whereabouts.network_ipam }}"
      app_multinetworkpolicies:
      # - name: deny-by-default
      #   destination: ""
      #   source: ""
      #   networkname: network-second-nic-whereabouts
      - name: allows-pods-only
        destination: ""
        source:
        - from:
          - podSelector: {}
          - ipBlock:
              cidr: "10.202.7.0/24"
        networkname: network-second-nic-whereabouts

    block:

    - name: Add namespace for ToDo app through Ansible  
      kubernetes.core.k8s:
        state: present
        template: 'templates/openshift_4_resource_namespace.yml'
        
    - name: Add the additional network
      kubernetes.core.k8s:
        api_version: k8s.cni.cncf.io/v1
        template: 'templates/openshift_4_resource_namespace_networkattachmentdefinition_macvlan.yml'

    - name: Set Image reference, allowing variabel precedence
      set_fact:
        app_container_source_set_fact: "{{ app_container_source }}"

    - name: Add Deployment
      kubernetes.core.k8s:
        api_version: apps/v1
        template: 'templates/openshift_4_resource_deployment.yml'
      register: app_deployment
      until: app_deployment.result.spec.template.spec.containers[0].image == vars.app_container_source_set_fact
      retries: 5
      delay: 5

    - name: Add Service
      kubernetes.core.k8s:
        state: present
        template: 'templates/openshift_4_resource_service.yml'

    - name: Add Route
      kubernetes.core.k8s:
        state: present
        template: 'templates/openshift_4_resource_route.yml'

    - name: Add MultiNetworkPolicies
      kubernetes.core.k8s:
        state: present
        template: 'templates/openshift_4_resource_multinetworkpolicy.yml'
      with_items: "{{ app_multinetworkpolicies }}"

    - name: Debug manually
      debug:
        msg: "Debug manually with 'oc run testcurl --image=redhat/ubi8 --overrides=\'{\"metadata\": {\"annotations\": {\"k8s.v1.cni.cncf.io/networks\": \"network-second-nic-whereabouts\"}},\"spec\": {\"nodeSelector\": {\"dedicated-node\": \"MOCK\"}}}\' -it -- sh' and 'curl http://<ip>:8080', IP found through 'oc describe pods'"

    - name: Get pod IPs
      kubernetes.core.k8s_info:
        api_version: v1
        kind: pod
        label_selectors:
        - "deployment = {{ app_name }}"
        namespace: "{{ app_namespace }}"
      register: pod_info

    - debug:
        msg: "Network status: {{ item.metadata.annotations['k8s.v1.cni.cncf.io/networks-status'] }}"
      when: item.metadata.annotations['k8s.v1.cni.cncf.io/networks-status'] is defined
      with_items: "{{ pod_info.resources }}"
      loop_control:
        label: "{{ item.metadata.name }}"


