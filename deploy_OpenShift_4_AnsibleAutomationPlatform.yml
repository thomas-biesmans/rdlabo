--- 
- import_playbook: tasks/check_all.yml


- name: Check OpenShift deployment status
  hosts: openshift_clusters
  gather_facts: false
  vars_files:
  - passwords/ansible_vault.yml
  - vars/network-config.yml
  - group_vars/vcenter_vms.yml
  environment:
    KUBECONFIG: "{{ openshift_config_dir }}/auth/kubeconfig"
  tasks:

  - name: Check whether OpenShift cluster exists already
    tags: always
    delegate_to: localhost
    block:

    - name: Check whether OpenShift cluster exists already
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Namespace
        name: openshift-kube-apiserver
      register: namespace_kube_apiserver
      delay: 10
      retries: 3
      ignore_errors: yes

    - name: "Halt when namespace 'openshift-kube-apiserver' does not already exists"
      fail:
        msg: "Namespace 'openshift-kube-apiserver' does not already exists, deploy it first!"
      when:  namespace_kube_apiserver.failed or namespace_kube_apiserver.resources[0].status.phase | default('') != "Active"


- name: Deploy Ansible Automation Platform
  hosts: openshift_bootstrap_nodes
  gather_facts: false
  vars_files:
  - passwords/ansible_vault.yml
  - vars/network-config.yml
  - group_vars/vcenter_vms.yml
  environment:
    KUBECONFIG: "{{ openshift_config_dir }}/auth/kubeconfig"
  tasks:

  - name: Deploy Operator
    tags: deploy_operator
    delegate_to: localhost
    block:

    - name: Install Ansible Automation Platform Operator
      include: tasks/deploy_openshift_operator_install.yml
      tags: onlyme
      vars:
        install_operator_action: install
        install_operator_name: "{{ ansible_automation_platform_config.operator_name }}"
        install_operator_namespace: "{{ ansible_automation_platform_config.operator_manage_namespaces }}"
        install_operator_catalog: "{{ ansible_automation_platform_config.operator_subscription_source }}"
        install_operator_packagemanifest_name: "{{ ansible_automation_platform_config.operator_name }}"
        install_operator_csv_nameprefix: "{{ ansible_automation_platform_config.operator_csv_nameprefix }}"
        install_operator_install_csv_ignore_error: false
        install_operator_channel: "{{ ansible_automation_platform_config.operator_channel }}"
        install_operator_automatic_install_plan_approval: "{{ ansible_automation_platform_config.operator_automatic_install_plan_approval | default(true) }}"
        install_operator_manage_namespaces:
        - "{{ ansible_automation_platform_config.operator_manage_namespaces }}"
        install_operator_catalogsource_setup: "{{ operator_catalogsource_setup | default(false) }}"
        install_operator_catalogsource_name: "{{ operator_catalogsource_name | default('') }}"
        install_operator_catalogsource_image: "{{ operator_catalogsource_image | default('') }}"
        install_operator_catalogsource_image_tag: "{{ operator_catalogsource_image_tag | default('') }}"

    - name: Add literal secret for AAP admin password
      vars:
        app_namespace: "{{ ansible_automation_platform_config.operator_manage_namespaces }}"
        app_secret_name: aap-admin-password
        app_secret_literals:
          password: "{{ ansible_automation_platform_config.aap_admin_secret | b64encode }}"
      kubernetes.core.k8s:
        state: present
        template: 'templates/openshift_4_resource_secret_literal.yml'

    - name: Add literal secret for AAP secret key / encryption key
      vars:
        app_namespace: "{{ ansible_automation_platform_config.operator_manage_namespaces }}"
        app_secret_name: aap-secret-key
        app_secret_literals:
          secret_key: "{{ ansible_automation_platform_config.aap_encryption_secret | b64encode }}"
      kubernetes.core.k8s:
        state: present
        template: 'templates/openshift_4_resource_secret_literal.yml'

    - name: Add literal secret for AAP broadcast websocket communication with clients
      vars:
        app_namespace: "{{ ansible_automation_platform_config.operator_manage_namespaces }}"
        app_secret_name: aap-broadcast-websocket-key
        app_secret_literals:
          secret: "{{ ansible_automation_platform_config.aap_broadcast_websocket_secret | b64encode }}"
      kubernetes.core.k8s:
        state: present
        template: 'templates/openshift_4_resource_secret_literal.yml'


    - name: Add an AAP Automation Controller
      vars:
        app_name: "{{ ansible_automation_platform_config.aap_hostname }}"
        app_namespace: "{{ ansible_automation_platform_config.operator_manage_namespaces }}"
        aap_admin_password_secret: aap-admin-password
        aap_secret_key_secret: aap-secret-key
        aap_broadcast_websocket_secret: aap-broadcast-websocket-key
        aap_replicas: "{{ ansible_automation_platform_config.aap_replicas }}"
        aap_replicas_web: "{{ ansible_automation_platform_config.aap_replicas_web }}"
        aap_replicas_task: "{{ ansible_automation_platform_config.aap_replicas_task }}"
        aap_postgres_storageclass: "{{ ansible_automation_platform_config.aap_postgres_storageclass }}"
        aap_auto_update_with_operator: "{{ ansible_automation_platform_config.aap_auto_update_with_operator }}"
      kubernetes.core.k8s:
        state: present
        template: 'templates/openshift_4_resource_ansible-aap_automationcontroller.yml'
      register: deploy_aap_automationcontroller
      retries: 72
      delay: 10
      until:
        - deploy_aap_automationcontroller.result.status.phase is defined
        - deploy_aap_automationcontroller.result.status.phase | length > 0
        - deploy_aap_automationcontroller.result.status.phase == 'Ready'

  - fail:

  - name: Deploy AAP configuration based on current inventory
    tags: deploy_config
    delegate_to: localhost
    block:

    - name: Create an inventory in AAP
      vars:
        