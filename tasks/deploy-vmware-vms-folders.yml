---

- name: Check whether the cluster exists
  when:
    - vars.community_vmware_vmware__guest.cluster is defined
  block:
    - name: Check cluster - Gather cluster information
      community.vmware.vmware_cluster_info:
        validate_certs: "{{ validate_certs | default(false) }}"
        hostname: "{{ vcenter_hostname | default(lookup('env', 'VMWARE_HOST')) }}"
        username: "{{ vcenter_username | default(lookup('env', 'VMWARE_USER')) }}"
        password: "{{ vcenter_password | default(lookup('env', 'VMWARE_PASSWORD')) }}"
        datacenter: "{{ vars.community_vmware_vmware__guest.datacenter }}"
      register: get_cluster_info_result

    - name: Check cluster - Fail if the cluster doesn't exist
      fail:
        msg: "{{ vars.community_vmware_vmware__guest.cluster }} not found."
      when:
        - "not vars.community_vmware_vmware__guest.cluster in get_cluster_info_result.clusters"
  
  delegate_to: localhost

- name: Deploy the VM folder recursively
  community.vmware.vcenter_folder:
    validate_certs: "{{ validate_certs | default(false) }}"
    hostname: "{{ vcenter_hostname | default(lookup('env', 'VMWARE_HOST')) }}"
    username: "{{ vcenter_username | default(lookup('env', 'VMWARE_USER')) }}"
    password: "{{ vcenter_password | default(lookup('env', 'VMWARE_PASSWORD')) }}"
    datacenter: "{{ vars.community_vmware_vmware__guest.datacenter }}"
    folder_name: "{{ item | default('vm') }}"
    parent_folder: "{{ vars.community_vmware_vmware__guest.folder.split('/')[1:1+index_current]|join('/') }}"
    folder_type: vm
    state: present
  loop: "{{ vars.community_vmware_vmware__guest.folder.split('/')[1:] }}"
  loop_control:
    extended: true
    index_var: index_current

  delegate_to: localhost