---
- name: Prepare NCP Plugin
  delegate_to: localhost
  when: nsx_integration
  block:

  - name: Download the plugin
    get_url:
      url: "{{ vars.ncp_config.ncp_plugin_source }}"
      dest: "{{ vars.openshift_download_dir }}/ncp-plugin.tar.gz"
    when: vars.ncp_config.ncp_plugin_source | length > 0

  - name: Untar the plugin
    unarchive:
      src: "{{ vars.openshift_download_dir }}/ncp-plugin.tar.gz"
      dest: "{{ vars.openshift_download_dir }}"
      creates: "{{ vars.openshift_download_dir }}/openshift4"

  - name: Create plugin dir
    file:
      path: "{{ vars.openshift_config_dir }}/ncp-plugin"
      state: directory

  - name: Copy the plugin files
    copy:
      src: "{{ vars.openshift_download_dir }}/openshift4/"
      dest: "{{ vars.openshift_config_dir }}/ncp-plugin"
      force: no


  - name: Check client certificate request
    stat:
      path: "{{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.crt"
    register: local_client_cert

  - name: Create a new client certificate if it does not exist
    shell: "openssl req -newkey rsa:2048 -sha256 -x509 -days 90 -extensions usr_cert -nodes -keyout
            {{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.key -out
            {{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.crt  -subj
            '/CN=NSX Admin for Ansible'"
    when: not local_client_cert.stat.exists

  - name: Check client .pfx format certificate 
    stat:
      path: "{{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.pfx"
    register: local_client_cert_pfx

  - name: Create .pfx format certificate if it does not exist
    shell: "openssl pkcs12 -export -password pass:{{ vmware_nsx_client_certificate_password }} -in 
            {{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.crt -inkey
            {{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.key -out 
            {{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.pfx"
    when: not local_client_cert_pfx.stat.exists

  - name: Check client .pem format certificate 
    stat:
      path: "{{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.pem"
    register: local_client_cert_pem

  - name: Create .pem format certificate if it does not exist
    shell: "openssl pkcs12 -nodes -password pass:{{ vmware_nsx_client_certificate_password }} -in 
            {{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.pfx -out 
            {{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.pem"
    when: not local_client_cert_pem.stat.exists

  # - name: Check certificates on NSX
  #   vmware.ansible_for_nsxt.nsxt_certificates_facts:
  #     hostname: "{{ nsx_hostname }}"
  #     username: "{{ vmware_nsx_username }}"
  #     password: "{{ vmware_nsx_password }}"
  #     validate_certs: False
  #   register: nsx_certificates

  # - name: Upload the certificate to NSX (not idempotent...)
  #   vmware.ansible_for_nsxt.nsxt_certificates:
  #     hostname: "{{ nsx_hostname }}"
  #     username: "{{ vmware_nsx_username }}"
  #     password: "{{ vmware_nsx_password }}"
  #     validate_certs: False
  #     display_name: "Root CA for Ansible NSX Admin"
  #     pem_encoded_file: "{{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_ca_name }}.crt"
  #     state: present
  #   when: nsx_certificates.results | selectattr ('display_name', 'eq', 'Root CA for Ansible NSX Admin') | list | length == 0


  - name: Remove the current role to uploaded certificate because of bad idempotency
    vmware.ansible_for_nsxt.nsxt_principal_identities:
      hostname: "{{ nsx_hostname }}"
      username: "{{ vmware_nsx_username }}"
      password: "{{ vmware_nsx_password }}"
      validate_certs: False
      display_name: "NSX Admin for Ansible"
      name: "NSX-Admin-Ansible" # No spaces
      node_id: "node-1"
      role: "enterprise_admin"
      certificate_pem_file: "{{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.pem"
      state: absent

  - name: Assign a role to uploaded certificate
    vmware.ansible_for_nsxt.nsxt_principal_identities:
      hostname: "{{ nsx_hostname }}"
      username: "{{ vmware_nsx_username }}"
      password: "{{ vmware_nsx_password }}"
      validate_certs: False
      display_name: "NSX Admin for Ansible"
      name: "NSX-Admin-Ansible" # No spaces
      node_id: "node-1"
      role: "enterprise_admin"
      state: present
      certificate_pem_file: "{{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.pem"


  - name: Set values in ConfigMap
    replace:
      path: "{{ vars.openshift_config_dir }}/ncp-plugin/configmap.yaml"
      regexp: "{{ item.src }}"
      replace: "{{ item.dest }}"
    with_items:
    - src: "^cluster = openshift$"
      dest: "cluster = {{ vars.openshift_cluster_name }}"
    - src: "^#nsx_api_managers = \\[\\]"
      dest: "nsx_api_managers = [{{ vars.nsx_hostname }}]"
    - src: "^#ca_file = \\[\\]"
      dest: "insecure=True #ca_file = []"
    - src: "^#nsx_api_cert_file = <None>"
      dest: "nsx_api_cert_file = {{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.crt"
    - src: "^#nsx_api_private_key_file = <None>"
      dest: "nsx_api_private_key_file = {{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.key"
    - src: "^#apiserver_host_ip = <None>"
      dest: "apiserver_host_ip = {{ vars.openshift_api_int_url }}"
    - src: "^#apiserver_host_port = <None>"
      dest: "apiserver_host_port = {{ vars.openshift_api_port }}"
    - src: "^#baseline_policy_type = <None>"
      dest: "baseline_policy_type = {{ vars.ncp_config.baseline_policy_type }}"
    - src: "^#enable_multus = False"
      dest: "enable_multus = {{ vars.ncp_config.enable_multus }}"
    - src: "^#overlay_tz = <None>"
      dest: "overlay_tz = {{ nsx_segment_config[0].transport_zone_display_name }}"

  - name: Set values in Operator
    replace:
      path: "{{ vars.openshift_config_dir }}/ncp-plugin/operator.yaml"
      regexp: "{{ item.src }}"
      replace: "{{ item.dest }}"
    with_items:
    - src: "nsx-ncp:latest"
      dest: "vmware/nsx-container-plugin-operator:v4.0.0"

  - name: Set values in Secret
    replace:
      path: "{{ vars.openshift_config_dir }}/ncp-plugin/nsx-secret.yaml"
      regexp: "{{ item.src }}"
      replace: "{{ item.dest }}"
    with_items:
    - src: "tls.crt: \"\""
      dest: "tls.crt: \"{{ lookup('file', '{{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.crt') | b64encode }}\""
    - src: "tls.key: \"\""
      dest: "tls.key: \"{{ lookup('file', '{{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.key') | b64encode }}\""

  - name: Test certificate
    vmware.ansible_for_nsxt.nsxt_policy_segment:
      hostname: "{{ nsx_hostname }}"
      # username: "{{ vmware_nsx_username }}"
      # password: "{{ vmware_nsx_password }}"
      nsx_cert_path: "{{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.pem"
      nsx_key_path: "{{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.key"
      # ca_path: "{{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_ca_name }}.crt"
      validate_certs: False
      display_name: TestSegmentShouldNotExistButYouKnowInfiniteMonkeys
      state: absent
    register: temp
  - debug:
      msg: "{{ temp }}"
  - pause: