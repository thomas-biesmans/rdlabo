---
- hosts: openshift_bootstrap_nodes
  gather_facts: false
  vars_files:
  - passwords/ansible_vault.yml
  - vars/network-config.yml
  - group_vars/vcenter_vms.yml
  tasks:
  - delegate_to: localhost
    block:

    # - name: remove first
    #   file:
    #     path: "{{ item }}"
    #     state: absent
    #   with_items:
    #   - "{{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.crt"
    #   - "{{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.key"
    #   - "{{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.key_pkcs8"

    # - name: Check client certificate request
    #   stat:
    #     path: "{{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.crt"
    #   register: local_client_cert

    # - name: Copy the current OpenSSL config file
    #   copy:
    #     src: /etc/pki/tls/openssl.cnf
    #     dest: "{{ openshift_config_dir }}/openssl_client_nsx.cnf"
    #   register: openssl_config_file_copy

    # - name: Add extra config to the OpenSSL config file
    #   blockinfile:
    #     path: "{{ openshift_config_dir }}/openssl_client_nsx.cnf"
    #     block: |
    #       [ client_server_ssl ]
    #       extendedKeyUsage = clientAuth
    #   when: openssl_config_file_copy.changed

    # - name: Create a new client certificate if it does not exist
    #   shell: "openssl req -newkey rsa:2048 -sha256 -x509 -days 3650 -extensions client_server_ssl -nodes -keyout 
    #       {{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.key_pkcs8 -new -out 
    #       {{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.crt -subj 
    #       /CN=nsx-admin-ansible -config {{ openshift_config_dir }}/openssl_client_nsx.cnf"
    #   when: not local_client_cert.stat.exists
    #   ignore_errors: yes

    # - name: Transform client certificate's key to RSA if the certificate does not exist
    #   shell: "openssl rsa -in
    #           {{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.key_pkcs8 -out
    #           {{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.key"
    #   when: not local_client_cert.stat.exists

    # - name: Remove the current certificate because of bad idempotency
    #   vmware.ansible_for_nsxt.nsxt_certificates:
    #     hostname: "{{ nsx_hostname }}"
    #     username: "{{ vmware_nsx_username }}"
    #     password: "{{ vmware_nsx_password }}"
    #     validate_certs: False
    #     display_name: "nsx-admin-ansible@nsx-admin-ansible"
    #     pem_encoded_file: "{{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.crt"
    #     state: absent
    #   ignore_errors: yes

    # - name: Assign a role to uploaded certificate
    #   vmware.ansible_for_nsxt.nsxt_principal_identities:
    #     hostname: "{{ nsx_hostname }}"
    #     username: "{{ vmware_nsx_username }}"
    #     password: "{{ vmware_nsx_password }}"
    #     validate_certs: False
    #     display_name: "nsx-admin-ansible"
    #     name: "nsx-admin-ansible" # No spaces
    #     node_id: "nsx-admin-ansible"
    #     role: "enterprise_admin"
    #     state: present
    #     # certificate_name: "nsx-admin-ansible@nsx-admin-ansible"
    #     certificate_pem_file: "{{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.crt"
    #   ignore_errors: yes



    # - name: reset file
    #   copy:
    #     src: /home/user1/openshift-install-4.9-upi-installer/openshift4/nsx-secret.yaml
    #     dest: "{{ vars.openshift_config_dir }}/ncp-plugin/nsx-secret.yaml"

    # - name: Read client cert
    #   slurp:
    #     src: "{{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.crt"
    #   register: client_cert_base64

    # - name: Read client cert key
    #   slurp:
    #     src: "{{ openshift_config_dir }}/ncp-plugin/{{ ncp_config.certificate_nsx_client_name }}.key"
    #   register: client_cert_key_base64

    # - name: Set values in NSX Secret for authentication
    #   replace:
    #     path: "{{ vars.openshift_config_dir }}/ncp-plugin/nsx-secret.yaml"
    #     regexp: "{{ item.src }}"
    #     replace: "{{ item.dest }}"
    #   with_items:
    #   - src: "tls.crt: \"\""
    #     dest: "tls.crt: \"{{ client_cert_base64.content }}\""
    #   - src: "tls.key: \"\""
    #     dest: "tls.key: \"{{ client_cert_key_base64.content }}\""
    



    # - name: reset file
    #   copy:
    #     src: /home/user1/openshift-install-4.9-upi-installer/openshift4/lb-secret.yaml
    #     dest: "{{ vars.openshift_config_dir }}/ncp-plugin/lb-secret.yaml"

    # - name: remove first
    #   file:
    #     path: "{{ item }}"
    #     state: absent
    #   with_items:
    #   - "{{ openshift_config_dir }}/{{ ncp_config.openshift_tls_certificate_name }}.crt"

    # - name: Check OpenShift TLS load-balancer certificate .crt file
    #   stat:
    #     path: "{{ openshift_config_dir }}/{{ ncp_config.openshift_tls_certificate_name }}.crt"
    #   register: local_openshift_tls_crt

    # # - name: Copy the current OpenSSL config file
    # #   copy:
    # #     src: /etc/pki/tls/openssl.cnf
    # #     dest: "{{ openshift_config_dir }}/openssl_tls_apps.cnf"
    # #   register: openssl_config_file_copy

    # - name: Add extra config to the OpenSSL config file
    #   blockinfile:
    #     path: "{{ openshift_config_dir }}/openssl_tls_apps.cnf"
    #     block: |
    #       [ req ]
    #       default_bits = 4096
    #       distinguished_name = req_distinguished_name
    #       prompt = no
    #       x509_extensions = v3_req
    #       [ req_distinguished_name ]
    #       {{ ncp_config.openshift_tls_certificate_subject_rev }}
    #       [ v3_req ]
    #       subjectAltName = @alt_names
    #       [ alt_names ]
    #       DNS.1 = {{ ncp_config.openshift_tls_certificate_san_dns }}
    #       DNS.2 = kubernetes
    #       DNS.3 = kubernetes.default
    #       DNS.4 = kubernetes.default.svc
    #       DNS.5 = kubernetes.default.svc.cluster.local
    #       DNS.6 = openshift
    #       DNS.7 = openshift.default
    #       DNS.8 = openshift.default.svc
    #       DNS.9 = openshift.default.svc.cluster.local
    #       IP.1 = {{ openshift_ingress_ip }}
    #     create: yes

    # - name: Create a new OpenShift TLS certificate if it does not exist
    #   shell: "openssl req -newkey rsa:4096 -sha256 -x509 -days 3650 -nodes -keyout
    #           {{ openshift_config_dir }}/{{ ncp_config.openshift_tls_certificate_name }}.key_pkcs8 -out
    #           {{ openshift_config_dir }}/{{ ncp_config.openshift_tls_certificate_name }}.crt -subj
    #           '{{ ncp_config.openshift_tls_certificate_subject }}' -config {{ openshift_config_dir }}/openssl_tls_apps.cnf"
    #   when: not local_openshift_tls_crt.stat.exists
    #   register: openshift_tls_crt

    # - name: Export the new OpenShift TLS certificate if it does not exist
    #   shell: "openssl rsa -in 
    #           {{ openshift_config_dir }}/{{ ncp_config.openshift_tls_certificate_name }}.key_pkcs8 -out 
    #           {{ openshift_config_dir }}/{{ ncp_config.openshift_tls_certificate_name }}.key"
    #   when: openshift_tls_crt.changed

    # - name: Set values in Load-Balancer Secret
    #   replace:
    #     path: "{{ openshift_config_dir }}/ncp-plugin/lb-secret.yaml"
    #     regexp: "{{ item.src }}"
    #     replace: "{{ item.dest }}"
    #   with_items:
    #   - src: "tls.crt: \"\""
    #     dest: "tls.crt: \"{{ lookup('file', '{{ openshift_config_dir }}/{{ ncp_config.openshift_tls_certificate_name }}.crt') | b64encode }}\""
    #   - src: "tls.key: \"\""
    #     dest: "tls.key: \"{{ lookup('file', '{{ openshift_config_dir }}/{{ ncp_config.openshift_tls_certificate_name }}.key') | b64encode }}\""


    # - name: Check CA certificate key
    #   stat:
    #     path: "{{ openshift_config_dir }}/{{ ncp_config.root_ca_certificate_name }}.key"
    #   register: local_ca_cert_key

    # - name: Check CA certificate 
    #   stat:
    #     path: "{{ openshift_config_dir }}/{{ ncp_config.root_ca_certificate_name }}.crt"
    #   register: local_ca_cert

    # - name: Create a new CA certificate if it does not exist
    #   shell: "openssl req -new -nodes -x509 -newkey rsa:4096 -days 3650 -keyout
    #           {{ openshift_config_dir }}/{{ ncp_config.root_ca_certificate_name }}.key -out 
    #           {{ openshift_config_dir }}/{{ ncp_config.root_ca_certificate_name }}.crt -subj
    #           '{{ ncp_config.root_ca_certificate_subject }}'"
    #   when: not local_ca_cert_key.stat.exists or not local_ca_cert.stat.exists


    # - name: Check image registry certificate .pem file
    #   stat:
    #     path: "{{ ncp_config.bastion_image_registry_certificate_volume }}/{{ ncp_config.bastion_image_registry_certificate_name }}.pem"
    #   register: local_image_registry_pem

    # # Self-signed
    # # - name: Create a new image registry certificate if it does not exist
    # #   shell: "openssl req -newkey rsa:4096 -x509 -days 3650 -nodes -keyout
    # #           {{ ncp_config.bastion_image_registry_certificate_volume }}/{{ ncp_config.bastion_image_registry_certificate_name }}.key -out
    # #           {{ ncp_config.bastion_image_registry_certificate_volume }}/{{ ncp_config.bastion_image_registry_certificate_name }}.pem -subj
    # #           {{ ncp_config.certificate_nsx_client_subject }} -addext 'subjectAltName = IP:{{ bastion_ip }}'"
    # #   when: not local_image_registry_pem.stat.exists
    # #   register: image_registry_certificate

    # - name: Add extra config to the OpenSSL config file
    #   blockinfile:
    #     path: "{{ openshift_config_dir }}/openssl_tls_imageregistry.cnf"
    #     block: |
    #       [ req ]
    #       default_bits = 4096
    #       distinguished_name = req_distinguished_name
    #       prompt = no
    #       x509_extensions = v3_req
    #       [ req_distinguished_name ]
    #       {{ ncp_config.bastion_image_registry_certificate_subject_rev }}
    #       [ v3_req ]
    #       subjectAltName = @alt_names
    #       [ alt_names ]
    #       IP = {{ bastion_ip }}
    #     create: yes
    #   when: not local_image_registry_pem.stat.exists
    
    # - name: Create a new image registry certificate request if it does not exist
    #   shell: "openssl req -newkey rsa:4096 -nodes -keyout
    #           {{ ncp_config.bastion_image_registry_certificate_volume }}/{{ ncp_config.bastion_image_registry_certificate_name }}.key -out
    #           {{ ncp_config.bastion_image_registry_certificate_volume }}/{{ ncp_config.bastion_image_registry_certificate_name }}.csr.pem -subj
    #           '{{ ncp_config.bastion_image_registry_certificate_subject }}' -config {{ openshift_config_dir }}/openssl_tls_imageregistry.cnf"
    #   when: not local_image_registry_pem.stat.exists

    # - name: Sign the new image registry certificate request if it does not exist
    #   shell: "openssl x509 -req -days 3650 -set_serial 01 -in
    #           {{ ncp_config.bastion_image_registry_certificate_volume }}/{{ ncp_config.bastion_image_registry_certificate_name }}.csr.pem -out
    #           {{ ncp_config.bastion_image_registry_certificate_volume }}/{{ ncp_config.bastion_image_registry_certificate_name }}.pem -CA
    #           {{ openshift_config_dir }}/{{ ncp_config.root_ca_certificate_name }}.crt -CAkey
    #           {{ openshift_config_dir }}/{{ ncp_config.root_ca_certificate_name }}.key -extfile
    #           {{ openshift_config_dir }}/openssl_tls_imageregistry.cnf -extensions v3_req"
    #   when: not local_image_registry_pem.stat.exists
    #   register: image_registry_certificate



    # - name: Check OpenShift TLS load-balancer certificate .crt file
    #   stat:
    #     path: "{{ openshift_config_dir }}/{{ ncp_config.openshift_tls_certificate_name }}.crt"
    #   register: local_openshift_tls_crt

    # # - name: Copy the current OpenSSL config file
    # #   copy:
    # #     src: /etc/pki/tls/openssl.cnf
    # #     dest: "{{ openshift_config_dir }}/openssl_tls_apps.cnf"
    # #   register: openssl_config_file_copy

    # - name: Add extra config to the OpenSSL config file
    #   blockinfile:
    #     path: "{{ openshift_config_dir }}/openssl_tls_apps.cnf"
    #     block: |
    #       [ req ]
    #       default_bits = 4096
    #       distinguished_name = req_distinguished_name
    #       prompt = no
    #       x509_extensions = v3_req
    #       [ req_distinguished_name ]
    #       {{ ncp_config.openshift_tls_certificate_subject_rev }}
    #       [ v3_req ]
    #       subjectAltName = @alt_names
    #       [ alt_names ]
    #       DNS.1 = {{ ncp_config.openshift_tls_certificate_san_dns }}
    #       DNS.2 = kubernetes
    #       DNS.3 = kubernetes.default
    #       DNS.4 = kubernetes.default.svc
    #       DNS.5 = kubernetes.default.svc.cluster.local
    #       DNS.6 = openshift
    #       DNS.7 = openshift.default
    #       DNS.8 = openshift.default.svc
    #       DNS.9 = openshift.default.svc.cluster.local
    #       IP.1 = {{ openshift_ingress_ip }}
    #     create: yes
    #   # when: openssl_config_file_copy.changed
    
    # # Self-signed
    # # - name: Create a new OpenShift TLS certificate if it does not exist
    # #   shell: "openssl req -newkey rsa:4096 -sha256 -x509 -days 3650 -nodes -keyout
    # #           {{ openshift_config_dir }}/{{ ncp_config.openshift_tls_certificate_name }}.key_pkcs8 -out
    # #           {{ openshift_config_dir }}/{{ ncp_config.openshift_tls_certificate_name }}.crt -subj
    # #           '{{ ncp_config.openshift_tls_certificate_subject }}' -config {{ openshift_config_dir }}/openssl_tls_apps.cnf"
    # #   when: not local_openshift_tls_crt.stat.exists
    # #   register: openshift_tls_crt

    # - name: Create a new OpenShift TLS certificate request if it does not exist
    #   shell: "openssl req -newkey rsa:4096 -sha256 -nodes -keyout
    #           {{ openshift_config_dir }}/{{ ncp_config.openshift_tls_certificate_name }}.key_pkcs8 -out
    #           {{ openshift_config_dir }}/{{ ncp_config.openshift_tls_certificate_name }}.csr.crt -subj
    #           '{{ ncp_config.openshift_tls_certificate_subject }}' -config {{ openshift_config_dir }}/openssl_tls_apps.cnf"
    #   when: not local_openshift_tls_crt.stat.exists

    # - name: Sign the new OpenShift TLS certificate request if it does not exist
    #   shell: "openssl x509 -req -days 3650 -set_serial 01 -in
    #           {{ openshift_config_dir }}/{{ ncp_config.openshift_tls_certificate_name }}.csr.crt -out
    #           {{ openshift_config_dir }}/{{ ncp_config.openshift_tls_certificate_name }}.crt -CA
    #           {{ openshift_config_dir }}/{{ ncp_config.root_ca_certificate_name }}.crt -CAkey
    #           {{ openshift_config_dir }}/{{ ncp_config.root_ca_certificate_name }}.key -extfile
    #           {{ openshift_config_dir }}/openssl_tls_apps.cnf -extensions v3_req"
    #   when: not local_openshift_tls_crt.stat.exists
    #   register: openshift_tls_crt
      
    # - name: Find root certificate for the TLS certificate
    #   community.crypto.certificate_complete_chain:
    #     input_chain: "{{ lookup('file', '{{ openshift_config_dir }}/{{ ncp_config.openshift_tls_certificate_name }}.crt') }}"
    #     # intermediate_certificates:
    #     # - /etc/ssl/csr/www.ansible.com-chain.pem
    #     root_certificates:
    #     - "{{ openshift_config_dir }}"
    #   register: openshift_tls_certificates

    # - copy:
    #     src: /home/user1/openshift-install-4.9-upi-installer/openshift4/lb-secret.yaml
    #     dest: "{{ openshift_config_dir }}/ncp-plugin/lb-secret.yaml"
    #     force: yes

    # - name: Set values in Load-Balancer Secret
    #   replace:
    #     path: "{{ openshift_config_dir }}/ncp-plugin/lb-secret.yaml"
    #     regexp: "{{ item.src }}"
    #     replace: "{{ item.dest }}"
    #   with_items:
    #   - src: "tls.crt: \"\""
    #     dest: "tls.crt: \"{{ (
    #       lookup('file', '{{ openshift_config_dir }}/{{ ncp_config.openshift_tls_certificate_name }}.crt') + '\n' +
    #       lookup('file', '{{ openshift_config_dir }}/{{ ncp_config.root_ca_certificate_name }}.crt')
    #     ) | b64encode }}\""
    #   - src: "tls.key: \"\""
    #     dest: "tls.key: \"{{ lookup('file', '{{ openshift_config_dir }}/{{ ncp_config.openshift_tls_certificate_name }}.key') | b64encode }}\""
  

    # - name: Add NetworkPolicies required to make 'baseline_policy_type = allow_namespace' work
    #   vars:
    #     app_namespace: default
    #     app_networkpolicies:
    #     - name: openshift-allow-oauth-apiserver-to-default-apiserver
    #       destination: {}
    #       source: 
    #       - from:
    #         - podSelector:
    #             matchLabels:
    #               deployment: apiserver
    #           namespaceSelector:
    #             matchLabels:
    #               project: default
    #     - name: openshift-allow-auth-operator-to-auth
    #       destination: {}
    #       source: 
    #       - from:
    #         - podSelector:
    #             matchLabels:
    #               deployment: apiserver
    #           namespaceSelector:
    #             matchLabels:
    #               project: default

    #     app_networkpolicies_egress:
    #     - name: openshift-allow-oauth-apiserver-to-apps-routes
    #       destination: {}
    #       source: 
    #         matchLabels:
    #           project: default
    #       destination:
    #       - to:
    #         - ipBlock:
    #             cidr: 10.200.1.1/24


    #     # - name: allow-wordpress-mysql
    #     #   destination:
    #     #     matchLabels:
    #     #       deployment: mysql
    #     #   source:
    #     #   - from:
    #     #     - podSelector:
    #     #         matchLabels:
    #     #           deployment: apiserver
    #     #       namespaceSelector:
    #     #         matchLabels:
    #     #           project: default
    #     #     ports:
    #     #     - port: 443
    #     #       protocol: TCP
    #     # - name: allow-ingress-to-wordpress
    #     #   destination:
    #     #     matchLabels:
    #     #       deployment: wordpress
    #     #   source:
    #     #   - ports:
    #     #     - protocol: TCP
    #     #       port: 80
    #     #     - protocol: TCP
    #     #       port: 443

    #   block:
  
    #   - name: Add Network Policies
    #     kubernetes.core.k8s:
    #       state: present
    #       template: 'templates/openshift_4_resource_networkpolicy.yml'
    #     with_items: "{{ app_networkpolicies }}"
          
    #   - name: Add Network Policies (egress)
    #     kubernetes.core.k8s:
    #       state: present
    #       template: 'templates/openshift_4_resource_networkpolicy_egress.yml'
    #     with_items: "{{ app_networkpolicies_egress }}"


    # Network Policies attempt for allow_namespace #
    ################################################
    # - name: Add NetworkPolicies required to make 'baseline_policy_type = allow_namespace' work \#2
    #   vars:
    #     app_namespace: openshift-authentication-operator
    #     app_networkpolicies: []

    #     app_networkpolicies_egress:
    #     - name: openshift-allow-oauth-operator-to-apps-route
    #       destination: {}
    #       source: 
    #         matchLabels:
    #           app: authentication-operator
    #       destination:
    #       - to:
    #         - ipBlock:
    #             cidr: 10.200.1.1/24
    #         - ipBlock:
    #             cidr: 172.30.0.0/16
    #         - ipBlock:
    #             cidr: 0.0.0.0/0

    #   block:
  
    #   - name: Add Network Policies
    #     kubernetes.core.k8s:
    #       state: present
    #       template: 'templates/openshift_4_resource_networkpolicy.yml'
    #     with_items: "{{ app_networkpolicies }}"
          
    #   - name: Add Network Policies (egress)
    #     kubernetes.core.k8s:
    #       state: present
    #       template: 'templates/openshift_4_resource_networkpolicy_egress.yml'
    #     with_items: "{{ app_networkpolicies_egress }}"



    # - name: Add NetworkPolicies required to make 'baseline_policy_type = allow_namespace' work \#3
    #   vars:
    #     app_namespace: openshift-authentication
    #     app_networkpolicies:
    #     - name: openshift-allow-authentication-operator-to-authentication
    #       destination: {}
    #       source: 
    #       - from:
    #         - namespaceSelector:
    #             matchLabels:
    #               kubernetes.io/metadata.name: openshift-authentication-operator
    #           podSelector:
    #             matchLabels:
    #               app: authentication-operator
              

    #     app_networkpolicies_egress: []

    #   block:
  
    #   - name: Add Network Policies
    #     kubernetes.core.k8s:
    #       state: present
    #       template: 'templates/openshift_4_resource_networkpolicy.yml'
    #     with_items: "{{ app_networkpolicies }}"
          
    #   - name: Add Network Policies (egress)
    #     kubernetes.core.k8s:
    #       state: present
    #       template: 'templates/openshift_4_resource_networkpolicy_egress.yml'
    #     with_items: "{{ app_networkpolicies_egress }}"


    # - name: Add NetworkPolicies required to make 'baseline_policy_type = allow_namespace' work \#4
    #   vars:
    #     app_namespace: openshift-authentication-operator
    #     app_networkpolicies: []

    #     app_networkpolicies_egress:
    #     - name: openshift-allow-oauth-to-apps-route
    #       destination: {}
    #       source: 
    #         matchLabels:
    #           app: oauth-openshift
    #       destination:
    #       - to:
    #         - ipBlock:
    #             cidr: 10.200.1.0/24
    #         - ipBlock:
    #             cidr: 172.30.0.0/16
    #         - ipBlock:
    #             cidr: 0.0.0.0/0

    #   block:
  
    #   - name: Add Network Policies
    #     kubernetes.core.k8s:
    #       state: present
    #       template: 'templates/openshift_4_resource_networkpolicy.yml'
    #     with_items: "{{ app_networkpolicies }}"
          
    #   - name: Add Network Policies (egress)
    #     kubernetes.core.k8s:
    #       state: present
    #       template: 'templates/openshift_4_resource_networkpolicy_egress.yml'
    #     with_items: "{{ app_networkpolicies_egress }}"



    # - name: Add NetworkPolicies required to make 'baseline_policy_type = allow_namespace' work \#5
    #   vars:
    #     app_namespace: openshift-ingress

    #     app_networkpolicies:
    #     - name: openshift-allow-all-ingress
    #       destination: {}
    #       source: 
    #       - from:
    #         - ipBlock:
    #             cidr: 0.0.0.0/0
    #       destination: {}

    #     app_networkpolicies_egress: []

    #   block:
  
    #   - name: Add Network Policies
    #     kubernetes.core.k8s:
    #       state: present
    #       template: 'templates/openshift_4_resource_networkpolicy.yml'
    #     with_items: "{{ app_networkpolicies }}"
          
    #   - name: Add Network Policies (egress)
    #     kubernetes.core.k8s:
    #       state: present
    #       template: 'templates/openshift_4_resource_networkpolicy_egress.yml'
    #     with_items: "{{ app_networkpolicies_egress }}"


    # - name: Add NetworkPolicies required to make 'baseline_policy_type = allow_namespace' work \#6
    #   vars:
    #     app_namespace: default

    #     app_networkpolicies:
    #     - name: openshift-allow-all-api
    #       destination: {}
    #       source: 
    #       - from:
    #         - ipBlock:
    #             cidr: 0.0.0.0/0
    #       destination: {}
          
    #     app_networkpolicies_egress: []

    #   block:
  
    #   - name: Add Network Policies
    #     kubernetes.core.k8s:
    #       state: present
    #       template: 'templates/openshift_4_resource_networkpolicy.yml'
    #     with_items: "{{ app_networkpolicies }}"
          
    #   - name: Add Network Policies (egress)
    #     kubernetes.core.k8s:
    #       state: present
    #       template: 'templates/openshift_4_resource_networkpolicy_egress.yml'
    #     with_items: "{{ app_networkpolicies_egress }}"


      # - name: Increase NCP replica count
      #   kubernetes.core.k8s_info:
      #     api_version: operator.nsx.vmware.com/v1
      #     namespace: nsx-system-operator
      #     kind: ncpinstall
      #     name: ncp-install
      #   register: dump

      # - debug:
      #     msg: "{{ dump.resources[0] }}"

      # - name: Increase NCP replica count
      #   kubernetes.core.k8s_json_patch:
      #     api_version: operator.nsx.vmware.com/v1
      #     namespace: nsx-system-operator
      #     kind: ncpinstall
      #     name: ncp-install
      #     patch:
      #       - op: replace
      #         path: "/spec/ncpReplicas"
      #         value: 3


      # - name: Check
      #   kubernetes.core.k8s_info:
      #     api_version: config.openshift.io/v1
      #     namespace: openshift-config
      #     kind: Image
      #     name: cluster
      #   register: dump

      # - debug:
      #     msg: "{{ dump.resources[0] }}"

      # - name: Add custom CA as trustedBundle, not performed automatically as proxy is not set in install-config
      #   kubernetes.core.k8s_json_patch:
      #     api_version: config.openshift.io/v1
      #     namespace: openshift-config
      #     kind: Image
      #     name: cluster
      #     patch:
      #     - op: add
      #       path: "/spec/additionalTrustedCA/name"
      #       value: user-ca-bundle

      # - name: Patch Ingress Controllers to use the LB secret
      #   kubernetes.core.k8s_info:
      #     api_version: operator.openshift.io/v1
      #     namespace: openshift-ingress-operator
      #     kind: IngressController
      #     name: default
      #   register: dump

      # - debug:
      #     msg: "{{ dump }}"


      # - name: Patch Ingress Controllers to use the LB secret
      #   kubernetes.core.k8s_json_patch:
      #     api_version: operator.openshift.io/v1
      #     namespace: openshift-ingress-operator
      #     kind: IngressController
      #     name: default
      #     patch:
      #     - op: add
      #       path: "/spec/defaultCertificate"
      #       value:
      #         name: lb-chain-secret



      - name: Add Ingress LB TLS secret
        kubernetes.core.k8s:
          state: present
          definition:
            api_version: v1
            kind: Secret
            metadata:
              name: lb-chain-secret
              namespace: openshift-ingress
            type: kubernetes.io/tls
            data:
              tls.crt: "{{ lookup('file', '{{ openshift_config_dir }}/{{ ncp_config.openshift_tls_certificate_name }}.crt', rstrip=false) | b64encode }}"
              tls.key: "{{ lookup('file', '{{ openshift_config_dir }}/{{ ncp_config.openshift_tls_certificate_name }}.key', rstrip=false) | b64encode }}"


      # - name: Patch Ingress Controllers to use the LB secret
      #   kubernetes.core.k8s_json_patch:
      #     api_version: operator.openshift.io/v1
      #     namespace: openshift-ingress-operator
      #     kind: IngressController
      #     name: default
      #     patch:
      #     - op: add
      #       path: "/spec/defaultCertificate"
      #       value:
      #         name: lb-chain-secret

      # - debug:
      #     msg: "{{ lookup('file', '{{ openshift_config_dir }}/{{ ncp_config.openshift_tls_certificate_name }}.crt') | to_nice_json | b64encode }}"

      # - debug:
      #     msg: "{{ lookup('file', '{{ openshift_config_dir }}/{{ ncp_config.openshift_tls_certificate_name }}.crt', rstrip=false) | b64encode }}"

