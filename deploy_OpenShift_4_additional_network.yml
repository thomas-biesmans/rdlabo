--- 
- import_playbook: tasks/check_all.yml


- name: Check OpenShift deployment status
  hosts: openshift_clusters
  gather_facts: false
  vars_files:
  - passwords/ansible_vault.yml
  - vars/network-config.yml
  - group_vars/vcenter_vms.yml
  environment:
    KUBECONFIG: "{{ vars.openshift_config_dir }}/auth/kubeconfig"
  tasks:

  - name: Combine customized VM config
    set_fact:
      community_vmware_vmware__guest: "{{ default_community_vmware_vmware__guest | combine(custom_community_vmware_vmware__guest | default({}), recursive=true) }}"
      ansible_becomes_password: "{{ client_password }}"
    tags: always

  - name: Check whether OpenShift cluster exists already
    tags: always
    delegate_to: localhost
    block:

    - name: Check whether OpenShift cluster exists already
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Namespace
        name: openshift-kube-apiserver
      register: namespace_kube_apiserver
      timeout: 10
      retries: 3
      ignore_errors: yes

    - name: "Halt when namespace 'openshift-kube-apiserver' does not already exists"
      fail:
        msg: "Namespace 'openshift-kube-apiserver' does not already exists, deploy it first!"
      when:  namespace_kube_apiserver.failed or namespace_kube_apiserver.resources[0].status.phase | default('') != "Active"

    - name: Deploy NSX segments
      ansible.builtin.include_tasks:
        file: tasks/deploy-vmware-nsx-segments.yml
        apply:
          tags: vm
      tags: vm, deploy_nsx_segments
      vars:
        ansible_python_interpreter: /usr/bin/python3.9
      when: nsx_integration
      

- name: Deploy the network to the worker nodes
  hosts: openshift_worker_nodes
  gather_facts: false
  vars_files:
  - passwords/ansible_vault.yml
  - vars/network-config.yml
  - group_vars/vcenter_vms.yml
  environment:
    KUBECONFIG: "{{ vars.openshift_config_dir }}/auth/kubeconfig"
  tasks:

  - debug:
      msg: "{{ vars.community_vmware_vmware__guest.networks[1:] }}"

  - name: Deploy the NIC
    community.vmware.vmware_guest_network:
      validate_certs: "{{ validate_certs | default(false) }}"
      hostname: "{{ vcenter_hostname | default(lookup('env', 'VMWARE_HOST')) }}"
      username: "{{ vcenter_username | default(lookup('env', 'VMWARE_USER')) }}"
      password: "{{ vcenter_password | default(lookup('env', 'VMWARE_PASSWORD')) }}"
      datacenter: "{{ vars.community_vmware_vmware__guest.datacenter }}"
      name: "{{ inventory_hostname_short }}"
      state: present
      network_name: "{{ item.name }}"
      device_type: "{{ item.device_type | default('vmxnet3') }}"
      connected: "{{ item.connected | default('true') }}"
      start_connected: "{{ item.start_connected | default('true') }}"
      mac_address: "{{ vars.mac | default (omit)}}"
      label: "{{ item.label | default (omit)}}"
    loop: "{{ vars.community_vmware_vmware__guest.networks }}"
    loop_control:
      extended: true
      index_var: index_current

    delegate_to: localhost
    register: nic_attch
  - debug: var=nic_attch


#
# - network_name: name of the network, unique in the cluster
# - network_nic: NIC on the worker nodes, e.g. ens224 for the 2nd NIC on VMWare VMs
# - network_ipam: IPAM configuration for the external network.
#   + External DHCP example:
#      {
#        "type": "dhcp"
#      }
#   + Internal whereabouts DHCP example:
#      {
#        "type": "whereabouts",
#        "range": "10.255.246.0/24",
#        "exclude": [
#          "10.255.246.0/25",
#          "10.255.246.128/26"
#        ]
#      }