---

- name: Display VM details 
  ansible.builtin.debug:
    msg: "Test: {{ vars.community_vmware_vmware__guest.folder }} & {{ vcenter_hostname }} & {{ inventory_hostname }} & {{ inventory_hostname_short }} & {{ vars.ip }}"


- name: Check whether the cluster exists
  when:
    - vars.community_vmware_vmware__guest.cluster is defined
  block:
    - name: Check cluster - Gather cluster information
      community.vmware.vmware_cluster_info:
        validate_certs: "{{ validate_certs | default(false) }}"
        hostname: "{{ vcenter_hostname | default(lookup('env', 'VMWARE_HOST')) }}"
        username: "{{ vcenter_username | default(lookup('env', 'VMWARE_USER')) }}"
        password: "{{ vcenter_password | default(lookup('env', 'VMWARE_PASSWORD')) }}"
        datacenter: "{{ vars.community_vmware_vmware__guest.datacenter }}"
      register: get_cluster_info_result

    - name: Check cluster - Fail if the cluster doesn't exist
      fail:
        msg: "{{ vars.community_vmware_vmware__guest.cluster }} not found."
      when:
        - "not vars.community_vmware_vmware__guest.cluster in get_cluster_info_result.clusters"
  
  delegate_to: localhost


- name: Update VM network IP & MAC based on inventory, adding network to the list
  set_fact:
    patch:
    - mac: "{{ vars.mac }}"

- name: Update VM network IP & MAC based on inventory, adding network to the list
  set_fact:
    new_networks: "{{ [] + [community_vmware_vmware__guest.networks | combine(patch, recursive=True)] }}"

- name: Show added IPs and MACs
  debug:
    msg: "IP: {{ vars.ip | default ('Not defined')}}, MAC: {{ vars.mac | default ('Not defined') }}"
- pause:

- name: Deploy the vNIC including retry and rescue
  block:

  - name: Get VM facts pre-deploy
    retries: 3
    delay: 10
    ignore_errors: true
    community.vmware.vmware_guest:
      validate_certs: "{{ validate_certs | default(false) }}"
      hostname: "{{ vcenter_hostname | default(lookup('env', 'VMWARE_HOST')) }}"
      username: "{{ vcenter_username | default(lookup('env', 'VMWARE_USER')) }}"
      password: "{{ vcenter_password | default(lookup('env', 'VMWARE_PASSWORD')) }}"  
      datacenter: "{{ vars.community_vmware_vmware__guest.datacenter }}"
      name: "{{ inventory_hostname_short }}"
    delegate_to: localhost
    register: facts_pre_deploy

  # - debug:
  #     msg: " biep"
  #   when: facts_pre_deploy.instance.hw_power_status != "poweredOn"

  - name: Deploy the vNIC if the VM exists
    when: not facts_pre_deploy.failed
    block:

    - name: Deploy the vNIC
      throttle: 1
      retries: 3
      delay: 10
      community.vmware.vmware_guest_network:
        validate_certs: "{{ validate_certs | default(false) }}"
        hostname: "{{ vcenter_hostname | default(lookup('env', 'VMWARE_HOST')) }}"
        username: "{{ vcenter_username | default(lookup('env', 'VMWARE_USER')) }}"
        password: "{{ vcenter_password | default(lookup('env', 'VMWARE_PASSWORD')) }}"
        datacenter: "{{ vars.community_vmware_vmware__guest.datacenter }}"
        cluster: "{{ vars.community_vmware_vmware__guest.cluster }}"
        name: "{{ inventory_hostname_short }}"
        state: "present"
        network_name: "{{ item.name }}"
        device_type: "{{ item.device_type | default('vmxnet3') }}"
        connected: "{{ item.connected | default('true') }}"
        start_connected: "{{ item.start_connected | default('true') }}"
        mac_address: "{{ vars.mac | default (omit)}}"
        label: "{{ item.label | default (omit)}}"
      delegate_to: localhost
      register: deploy
      loop: "{{ vars.new_networks }}"
      when: vars.mac is defined and not deploy.changed
      
- name: Show VM info
  debug:
    msg: "{{ deploy }}"
- pause:
  
- name: Get VM facts
  retries: 3
  delay: 10
  community.vmware.vmware_guest:
    validate_certs: "{{ validate_certs | default(false) }}"
    hostname: "{{ vcenter_hostname | default(lookup('env', 'VMWARE_HOST')) }}"
    username: "{{ vcenter_username | default(lookup('env', 'VMWARE_USER')) }}"
    password: "{{ vcenter_password | default(lookup('env', 'VMWARE_PASSWORD')) }}"  
    datacenter: "{{ vars.community_vmware_vmware__guest.datacenter }}"
    name: "{{ inventory_hostname_short }}"
  delegate_to: localhost
  register: facts_post_deploy
  when: vars.mac is defined

- name: Show VM info
  debug:
    msg: "{{ facts_post_deploy }}"

